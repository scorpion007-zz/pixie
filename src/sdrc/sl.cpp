
/*  A Bison parser, made from ../../../../src/sdrc/sl.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define alloca

#define yyparse slparse
#define yylex sllex
#define yyerror slerror
#define yylval sllval
#define yychar slchar
#define yydebug sldebug
#define yynerrs slnerrs
#define	SL_SURFACE	258
#define	SL_DISPLACEMENT	259
#define	SL_LIGHT	260
#define	SL_VOLUME	261
#define	SL_TRANSFORMATION	262
#define	SL_IMAGER	263
#define	SL_FOR	264
#define	SL_WHILE	265
#define	SL_IF	266
#define	SL_GATHER	267
#define	SL_ELSE	268
#define	SL_BREAK	269
#define	SL_CONTINUE	270
#define	SL_ILLUMINANCE	271
#define	SL_ILLUMINATE	272
#define	SL_SOLAR	273
#define	SL_RETURN	274
#define	SL_VOID	275
#define	SL_FCN_PI	276
#define	SL_IDENTIFIER_VALUE	277
#define	SL_FLOAT_VALUE	278
#define	SL_COMMA	279
#define	SL_SEMI_COLON	280
#define	SL_OPEN_PARANTHESIS	281
#define	SL_CLOSE_PARANTHESIS	282
#define	SL_OPEN_CRL_PARANTHESIS	283
#define	SL_CLOSE_CRL_PARANTHESIS	284
#define	SL_OPEN_SQR_PARANTHESIS	285
#define	SL_CLOSE_SQR_PARANTHESIS	286
#define	SL_TEXTURE	287
#define	SL_SHADOW	288
#define	SL_ENVIRONMENT	289
#define	SL_BUMP	290
#define	SL_TEXT_VALUE	291
#define	SL_QUESTION	292
#define	SL_COLON	293
#define	SL_FLOAT	294
#define	SL_COLOR	295
#define	SL_POINT	296
#define	SL_VECTOR	297
#define	SL_NORMAL	298
#define	SL_MATRIX	299
#define	SL_STRING	300
#define	SL_COMP_EQUAL	301
#define	SL_COMP_DIFFERENT	302
#define	SL_COMP_GREATER	303
#define	SL_COMP_GREATER_EQUAL	304
#define	SL_COMP_LESS	305
#define	SL_COMP_LESS_EQUAL	306
#define	SL_EQUAL	307
#define	SL_INCREMENT	308
#define	SL_DECREMENT	309
#define	SL_INCREMENT_BY	310
#define	SL_DECREMENT_BY	311
#define	SL_MULTIPLY_BY	312
#define	SL_DIVIDE_BY	313
#define	SL_PLUS	314
#define	SL_MINUS	315
#define	SL_CROSS	316
#define	SL_DIVIDE	317
#define	SL_MULTIPLY	318
#define	SL_DOT	319
#define	SL_OR	320
#define	SL_AND	321
#define	SL_NOT	322
#define	SL_OUTPUT	323
#define	SL_EXTERN	324
#define	SL_UNIFORM	325
#define	SL_VARIABLE	326

#line 60 "../../../../src/sdrc/sl.y"

//////////////////////////////////////////////////////////////////////////
// Misc C definitions
//////////////////////////////////////////////////////////////////////////
#undef alloca
#include	<stdlib.h>
#include	<string.h>

#include	"common/global.h"
#include	"common/os.h"
#include	"opcodes.h"
#include	"sdr.h"

	void				yyerror(char *);				// Forward definition for stupid yacc
	int					yylex(void );					// Forward definition for stupid yacc
														
//////////////////////////////////////////////////////////////////////////
// Here's the only global CVariable
//////////////////////////////////////////////////////////////////////////
	CScriptContext		*sdr;

//////////////////////////////////////////////////////////////////////////



#line 85 "../../../../src/sdrc/sl.y"
typedef union {
  char					*string;
  CExpression			*code;
  CExpression			*expression;
  float					real;
  int					integer;
  CArray<CExpression *>	*array;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		443
#define	YYFLAG		32768
#define	YYNTBASE	72

#define YYTRANSLATE(x) ((unsigned)(x) <= 326 ? yytranslate[x] : 176)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     6,     8,     9,    11,    12,    14,    15,
    17,    19,    21,    23,    25,    27,    29,    34,    37,    39,
    43,    47,    52,    54,    55,    59,    62,    64,    65,    69,
    70,    75,    77,    78,    85,    86,    94,    98,   103,   104,
   105,   114,   116,   118,   120,   122,   124,   126,   128,   129,
   133,   136,   138,   139,   143,   146,   149,   150,   155,   156,
   160,   161,   169,   170,   177,   178,   180,   184,   185,   190,
   193,   196,   199,   200,   204,   205,   210,   211,   218,   219,
   227,   230,   232,   234,   236,   238,   241,   242,   244,   246,
   248,   250,   253,   256,   258,   260,   262,   264,   266,   268,
   270,   272,   274,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   297,   300,   304,   307,   311,   314,   319,   322,
   325,   326,   331,   332,   340,   341,   346,   347,   352,   355,
   358,   359,   364,   365,   370,   371,   379,   380,   388,   394,
   400,   401,   409,   410,   418,   420,   430,   440,   442,   443,
   447,   449,   451,   452,   454,   455,   459,   461,   465,   467,
   475,   481,   489,   493,   495,   496,   502,   507,   510,   515,
   517,   523,   531,   541,   553,   559,   567,   577,   589,   595,
   605,   611,   621,   626,   634,   639,   647,   649,   653,   657,
   661,   665,   666,   671,   675,   678,   681,   687,   691,   695,
   697,   699,   701,   703,   705,   707,   709,   714,   716,   718,
   726,   760,   764,   767,   771,   775,   779,   783,   787,   791,
   795,   799,   803,   807,   811,   815,   818,   820,   822,   825,
   828,   831,   835,   837,   839,   843,   844,   852,   858,   860,
   862,   864,   866,   868,   869,   870,   875
};

static const short yyrhs[] = {    -1,
    73,    79,     0,    70,     0,    71,     0,     0,    69,     0,
     0,    68,     0,     0,    39,     0,    40,     0,    42,     0,
    43,     0,    41,     0,    44,     0,    45,     0,    75,    76,
    74,    77,     0,    81,    79,     0,    90,     0,    78,    22,
    26,     0,    20,    22,    26,     0,    80,    82,    27,   105,
     0,    83,     0,     0,    84,    25,    83,     0,    84,    25,
     0,    84,     0,     0,    78,    85,    86,     0,     0,    22,
    87,    24,    86,     0,    22,     0,     0,    22,    30,    31,
    88,    24,    86,     0,     0,    22,    30,    23,    31,    89,
    24,    86,     0,    22,    30,    31,     0,    22,    30,    23,
    31,     0,     0,     0,    93,    22,    26,    91,    94,    27,
    92,   105,     0,     3,     0,     4,     0,     5,     0,     6,
     0,     7,     0,     8,     0,    95,     0,     0,    96,    25,
    95,     0,    96,    25,     0,    96,     0,     0,    78,    97,
   104,     0,    52,   159,     0,    52,   161,     0,     0,    22,
    24,   100,    99,     0,     0,    22,   101,    98,     0,     0,
    22,    30,    23,    31,    24,   102,    99,     0,     0,    22,
    30,    23,    31,   103,    98,     0,     0,    99,     0,    99,
    24,   104,     0,     0,    28,   106,   116,    29,     0,    78,
   109,     0,    52,   159,     0,    52,   161,     0,     0,    22,
   110,   114,     0,     0,    22,   111,   108,   114,     0,     0,
    22,    30,    23,    31,   112,   114,     0,     0,    22,    30,
    23,    31,   113,   108,   114,     0,    24,   109,     0,    25,
     0,   118,     0,   117,     0,     1,     0,   116,   115,     0,
     0,   138,     0,   123,     0,   145,     0,   150,     0,   125,
    25,     0,   128,    25,     0,   119,     0,   120,     0,   121,
     0,   153,     0,   155,     0,   157,     0,   105,     0,   107,
     0,    81,     0,   166,    25,     0,    25,     0,   146,     0,
   151,     0,   124,     0,   139,     0,   154,     0,   156,     0,
   158,     0,    14,    23,    25,     0,    14,    25,     0,    15,
    23,    25,     0,    15,    25,     0,    19,   159,    25,     0,
    19,    25,     0,    10,    26,   165,    27,     0,   122,   117,
     0,   122,   118,     0,     0,    22,    52,   126,   159,     0,
     0,    22,    30,   159,    31,    52,   127,   159,     0,     0,
    22,    55,   129,   159,     0,     0,    22,    56,   130,   159,
     0,    22,    53,     0,    22,    54,     0,     0,    22,    57,
   131,   159,     0,     0,    22,    58,   132,   159,     0,     0,
    22,    30,   159,    31,    55,   133,   159,     0,     0,    22,
    30,   159,    31,    56,   134,   159,     0,    22,    30,   159,
    31,    53,     0,    22,    30,   159,    31,    54,     0,     0,
    22,    30,   159,    31,    57,   135,   159,     0,     0,    22,
    30,   159,    31,    58,   136,   159,     0,     9,     0,   137,
    26,   140,    25,   142,    25,   143,    27,   117,     0,   137,
    26,   140,    25,   142,    25,   143,    27,   118,     0,   141,
     0,     0,   125,    24,   141,     0,   125,     0,   165,     0,
     0,   144,     0,     0,   125,    24,   144,     0,   125,     0,
   128,    24,   144,     0,   128,     0,    11,    26,   165,    27,
   117,    13,   117,     0,    11,    26,   165,    27,   115,     0,
    11,    26,   165,    27,   117,    13,   118,     0,   147,    24,
   159,     0,   159,     0,     0,    12,    26,   149,   147,    27,
     0,   148,   117,    13,   117,     0,   148,   115,     0,   148,
   117,    13,   118,     0,    16,     0,   152,    26,   159,    27,
   117,     0,   152,    26,   159,    24,   159,    27,   117,     0,
   152,    26,   159,    24,   159,    24,   159,    27,   117,     0,
   152,    26,   159,    24,   159,    24,   159,    24,   159,    27,
   117,     0,   152,    26,   159,    27,   118,     0,   152,    26,
   159,    24,   159,    27,   118,     0,   152,    26,   159,    24,
   159,    24,   159,    27,   118,     0,   152,    26,   159,    24,
   159,    24,   159,    24,   159,    27,   118,     0,    17,    26,
   159,    27,   117,     0,    17,    26,   159,    24,   159,    24,
   159,    27,   117,     0,    17,    26,   159,    27,   118,     0,
    17,    26,   159,    24,   159,    24,   159,    27,   118,     0,
    18,    26,    27,   117,     0,    18,    26,   159,    24,   159,
    27,   117,     0,    18,    26,    27,   118,     0,    18,    26,
   159,    24,   159,    27,   118,     0,   163,     0,   159,    59,
   159,     0,   159,    60,   159,     0,   159,    63,   159,     0,
   159,    62,   159,     0,     0,   159,    64,   160,   159,     0,
   159,    61,   159,     0,    59,   159,     0,    60,   159,     0,
   165,    37,   159,    38,   159,     0,    28,   162,    29,     0,
   159,    24,   162,     0,   159,     0,    21,     0,   125,     0,
   128,     0,   164,     0,   166,     0,    22,     0,    22,    30,
   159,    31,     0,    23,     0,    36,     0,    26,   159,    24,
   159,    24,   159,    27,     0,    26,   159,    24,   159,    24,
   159,    24,   159,    24,   159,    24,   159,    24,   159,    24,
   159,    24,   159,    24,   159,    24,   159,    24,   159,    24,
   159,    24,   159,    24,   159,    24,   159,    27,     0,    26,
   159,    27,     0,    78,   159,     0,    78,    36,   159,     0,
    26,   165,    27,     0,   165,    66,   165,     0,   165,    65,
   165,     0,   159,    48,   159,     0,   159,    50,   159,     0,
   159,    49,   159,     0,   159,    51,   159,     0,   159,    46,
   159,     0,   159,    47,   159,     0,   165,    46,   165,     0,
   165,    47,   165,     0,    67,   165,     0,   171,     0,   168,
     0,    22,    26,     0,     3,    26,     0,     4,    26,     0,
   167,   173,    27,     0,    36,     0,    22,     0,    30,   159,
    31,     0,     0,   172,    26,   169,   170,    24,   173,    27,
     0,   172,    26,   169,   170,    27,     0,    32,     0,    33,
     0,    34,     0,    35,     0,   174,     0,     0,     0,   159,
    24,   175,   174,     0,   159,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   243,   250,   254,   259,   264,   271,   276,   282,   287,   293,
   298,   303,   308,   313,   318,   323,   330,   350,   355,   370,
   386,   397,   418,   423,   432,   439,   445,   454,   473,   481,
   489,   493,   502,   512,   516,   532,   536,   547,   570,   583,
   588,   605,   609,   614,   619,   624,   629,   638,   643,   651,
   658,   664,   673,   687,   700,   706,   715,   724,   727,   735,
   738,   755,   758,   775,   779,   786,   791,   803,   809,   823,
   844,   850,   858,   868,   871,   881,   885,   904,   907,   927,
   933,   939,   949,   956,   962,   972,   978,   987,   992,   997,
  1002,  1007,  1012,  1017,  1022,  1027,  1032,  1037,  1042,  1047,
  1052,  1057,  1062,  1067,  1076,  1081,  1086,  1091,  1096,  1101,
  1106,  1115,  1142,  1171,  1198,  1225,  1254,  1278,  1291,  1301,
  1314,  1324,  1334,  1347,  1361,  1371,  1381,  1391,  1401,  1412,
  1423,  1433,  1443,  1453,  1463,  1476,  1486,  1499,  1509,  1523,
  1537,  1550,  1560,  1573,  1587,  1593,  1610,  1629,  1634,  1642,
  1649,  1658,  1663,  1671,  1676,  1684,  1691,  1696,  1703,  1712,
  1727,  1736,  1753,  1760,  1768,  1776,  1784,  1797,  1804,  1817,
  1825,  1836,  1849,  1864,  1883,  1894,  1907,  1922,  1943,  1954,
  1971,  1982,  2001,  2011,  2026,  2036,  2053,  2058,  2065,  2072,
  2105,  2112,  2119,  2123,  2130,  2136,  2142,  2160,  2169,  2177,
  2185,  2190,  2195,  2200,  2205,  2210,  2223,  2238,  2243,  2248,
  2259,  2315,  2325,  2333,  2344,  2351,  2358,  2365,  2373,  2381,
  2389,  2397,  2405,  2413,  2421,  2429,  2440,  2480,  2489,  2504,
  2519,  2536,  2615,  2620,  2631,  2638,  2649,  2673,  2697,  2710,
  2723,  2736,  2753,  2757,  2762,  2769,  2771
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","SL_SURFACE",
"SL_DISPLACEMENT","SL_LIGHT","SL_VOLUME","SL_TRANSFORMATION","SL_IMAGER","SL_FOR",
"SL_WHILE","SL_IF","SL_GATHER","SL_ELSE","SL_BREAK","SL_CONTINUE","SL_ILLUMINANCE",
"SL_ILLUMINATE","SL_SOLAR","SL_RETURN","SL_VOID","SL_FCN_PI","SL_IDENTIFIER_VALUE",
"SL_FLOAT_VALUE","SL_COMMA","SL_SEMI_COLON","SL_OPEN_PARANTHESIS","SL_CLOSE_PARANTHESIS",
"SL_OPEN_CRL_PARANTHESIS","SL_CLOSE_CRL_PARANTHESIS","SL_OPEN_SQR_PARANTHESIS",
"SL_CLOSE_SQR_PARANTHESIS","SL_TEXTURE","SL_SHADOW","SL_ENVIRONMENT","SL_BUMP",
"SL_TEXT_VALUE","SL_QUESTION","SL_COLON","SL_FLOAT","SL_COLOR","SL_POINT","SL_VECTOR",
"SL_NORMAL","SL_MATRIX","SL_STRING","SL_COMP_EQUAL","SL_COMP_DIFFERENT","SL_COMP_GREATER",
"SL_COMP_GREATER_EQUAL","SL_COMP_LESS","SL_COMP_LESS_EQUAL","SL_EQUAL","SL_INCREMENT",
"SL_DECREMENT","SL_INCREMENT_BY","SL_DECREMENT_BY","SL_MULTIPLY_BY","SL_DIVIDE_BY",
"SL_PLUS","SL_MINUS","SL_CROSS","SL_DIVIDE","SL_MULTIPLY","SL_DOT","SL_OR","SL_AND",
"SL_NOT","SL_OUTPUT","SL_EXTERN","SL_UNIFORM","SL_VARIABLE","slStart","@1","slContainerClass",
"slInheritanceClass","slOutputClass","slTypeSpecifier","slTypeDecl","slShader",
"slFunctionHeader","slFunction","slFunctionParameterList","slFunctionParameters",
"slFunctionParameter","@2","slFunctionParameterIdentifierList","@3","@4","@5",
"slMain","@6","@7","slShaderType","slShaderParameterList","slShaderParameters",
"slShaderParameter","@8","slShaderParameterInitializer","slShaderParameterIdentifierToken",
"@9","@10","@11","@12","slShaderParameterIdentifierList","slBlock","@13","slVariableDeclerations",
"slVariableInitializer","slVariableIdentifierList","@14","@15","@16","@17","slVariableIdentifierTail",
"slStatement","slStatements","slMatchedStatement","slUnmatchedStatement","slBreakStatement",
"slContinueStatement","slReturnStatement","slWhileStartStatement","slWhileStatement",
"slUnmatchedWhileStatement","slAssignmentStatement","@18","@19","slUpdateStatement",
"@20","@21","@22","@23","@24","@25","@26","@27","slForStartStatement","slForStatement",
"slUnmatchedForStatement","slForInitStatement","slForInitStatements","slForCheckStatement",
"slForIncrementStatement","slForIncrementStatements","slMatchedIfStatement",
"slUnmatchedIfStatement","slGatherParameterList","slGatherHeader","@28","slMatchedGatherStatement",
"slUnmatchedGatherStatement","slIlluminanceStartStatement","slIlluminanceStatement",
"slUnmatchedIlluminanceStatement","slIlluminateStatement","slUnmatchedIlluminateStatement",
"slSolarStatement","slUnmatchedSolarStatement","slAritmeticExpression","@29",
"slArrayList","slArrayItems","slAritmeticTerminalValue","slAritmeticTypeCast",
"slBooleanExpression","slFunctionCall","slFunCallHeader","slFunCall","slTextureNameSpecifier",
"slTextureChannelSpecifier","slTextureCall","slTextureName","slFunctionCallParameterList",
"slFunctionCallParameters","@30", NULL
};
#endif

static const short yyr1[] = {     0,
    73,    72,    74,    74,    74,    75,    75,    76,    76,    77,
    77,    77,    77,    77,    77,    77,    78,    79,    79,    80,
    80,    81,    82,    82,    83,    83,    83,    85,    84,    87,
    86,    86,    88,    86,    89,    86,    86,    86,    91,    92,
    90,    93,    93,    93,    93,    93,    93,    94,    94,    95,
    95,    95,    97,    96,    98,    98,   100,    99,   101,    99,
   102,    99,   103,    99,    99,   104,   104,   106,   105,   107,
   108,   108,   110,   109,   111,   109,   112,   109,   113,   109,
   114,   114,   115,   115,   115,   116,   116,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   118,   118,   118,   118,   118,   118,
   118,   119,   119,   120,   120,   121,   121,   122,   123,   124,
   126,   125,   127,   125,   129,   128,   130,   128,   128,   128,
   131,   128,   132,   128,   133,   128,   134,   128,   128,   128,
   135,   128,   136,   128,   137,   138,   139,   140,   140,   141,
   141,   142,   142,   143,   143,   144,   144,   144,   144,   145,
   146,   146,   147,   147,   149,   148,   150,   151,   151,   152,
   153,   153,   153,   153,   154,   154,   154,   154,   155,   155,
   156,   156,   157,   157,   158,   158,   159,   159,   159,   159,
   159,   160,   159,   159,   159,   159,   159,   161,   162,   162,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   164,   164,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   165,   165,   166,   166,   167,   167,
   167,   168,   169,   169,   170,   170,   171,   171,   172,   172,
   172,   172,   173,   173,   175,   174,   174
};

static const short yyr2[] = {     0,
     0,     2,     1,     1,     0,     1,     0,     1,     0,     1,
     1,     1,     1,     1,     1,     1,     4,     2,     1,     3,
     3,     4,     1,     0,     3,     2,     1,     0,     3,     0,
     4,     1,     0,     6,     0,     7,     3,     4,     0,     0,
     8,     1,     1,     1,     1,     1,     1,     1,     0,     3,
     2,     1,     0,     3,     2,     2,     0,     4,     0,     3,
     0,     7,     0,     6,     0,     1,     3,     0,     4,     2,
     2,     2,     0,     3,     0,     4,     0,     6,     0,     7,
     2,     1,     1,     1,     1,     2,     0,     1,     1,     1,
     1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     2,     3,     2,     3,     2,     4,     2,     2,
     0,     4,     0,     7,     0,     4,     0,     4,     2,     2,
     0,     4,     0,     4,     0,     7,     0,     7,     5,     5,
     0,     7,     0,     7,     1,     9,     9,     1,     0,     3,
     1,     1,     0,     1,     0,     3,     1,     3,     1,     7,
     5,     7,     3,     1,     0,     5,     4,     2,     4,     1,
     5,     7,     9,    11,     5,     7,     9,    11,     5,     9,
     5,     9,     4,     7,     4,     7,     1,     3,     3,     3,
     3,     0,     4,     3,     2,     2,     5,     3,     3,     1,
     1,     1,     1,     1,     1,     1,     4,     1,     1,     7,
    33,     3,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     2,     1,     1,     2,     2,
     2,     3,     1,     1,     3,     0,     7,     5,     1,     1,
     1,     1,     1,     0,     0,     4,     1
};

static const short yydefact[] = {     1,
     7,    42,    43,    44,    45,    46,    47,     0,     6,     9,
     0,     2,     7,     7,    19,     0,     0,     8,     5,     0,
    28,     0,    23,    27,    18,     0,    21,     3,     4,     0,
    20,     0,     0,     7,    39,    10,    11,    14,    12,    13,
    15,    16,    17,    32,    29,    68,    22,    25,     7,     0,
     0,    87,    53,     0,    48,    52,     0,    37,     0,     0,
    65,    40,     7,    38,     0,    31,    85,     0,     0,   145,
     0,     0,     0,     0,     0,   170,     0,     0,     7,     0,
   104,    69,   239,   240,   241,   242,     0,   102,   100,   101,
    86,    84,    83,    94,    95,    96,     7,    89,   107,     0,
     0,     0,    88,   108,    90,   105,     0,    91,   106,     0,
    97,   109,    98,   110,    99,   111,     0,     7,   228,   227,
     0,    59,    66,    54,     0,    50,     0,     0,   230,   231,
     7,     7,   165,     0,   113,     0,   115,     7,     7,   201,
   206,   208,   117,     7,   209,     7,     7,     7,     7,   202,
   203,     0,   187,   204,     0,   205,   229,     7,   121,   129,
   130,   125,   127,   131,   133,    73,    70,   119,   120,    92,
    93,   149,   168,    84,     7,   103,   247,     0,   243,     0,
    57,     0,     0,    65,    41,     0,    34,     0,     0,     0,
     7,   112,   114,     0,     7,     0,     7,     0,     0,   195,
   196,   226,   209,   213,   116,     7,     7,     7,     7,     7,
     7,     7,     7,     7,     7,     7,   192,     7,     7,     7,
     7,     7,     0,     7,     7,     7,     7,     7,     0,     0,
     0,     0,   151,     0,   148,     7,     0,   245,   232,   234,
   233,   236,    65,     0,     7,    60,    67,    36,   118,     0,
     0,   164,     7,     7,   183,   185,     7,     0,     7,   212,
   215,   214,   222,   223,   218,   220,   219,   221,   188,   189,
   194,   191,   190,     7,     0,   224,   225,   217,   216,     0,
   122,   126,   128,   132,   134,     0,     0,    82,    74,     7,
     0,     7,     0,     7,   167,   169,     7,     7,     7,     7,
     0,    58,    63,     7,    55,    56,   161,    84,     7,   166,
     0,   179,   181,     0,   207,     0,   193,     7,   123,   139,
   140,   135,   137,   141,   143,    77,    73,    81,    71,    72,
    76,     0,   150,     0,   152,     0,   171,   175,   246,     0,
     7,   238,    61,     0,   200,     0,     7,   163,     7,     7,
     7,   197,     7,     7,     7,     7,     7,     0,     0,     0,
   155,     7,     7,   235,     0,    65,    64,     7,   198,   160,
   162,     0,   184,   186,     0,   124,   136,   138,   142,   144,
    78,     0,     0,   157,   159,     0,   154,     0,   172,   176,
   237,    62,   199,     7,     7,   210,    80,     0,     0,     7,
     7,     7,   180,   182,     0,   156,   158,   146,   147,     0,
   173,   177,     7,     7,     0,   174,   178,     7,     0,     7,
     0,     7,     0,     7,     0,     7,     0,     7,     0,     7,
     0,     7,     0,     7,     0,     7,     0,     7,     0,   211,
     0,     0,     0
};

static const short yydefgoto[] = {   441,
     1,    30,    10,    19,    43,   149,    12,    13,    88,    22,
    23,    24,    32,    45,    51,    65,   127,    15,    49,   125,
    16,    54,    55,    56,    61,   246,   123,   243,   183,   366,
   344,   124,    89,    52,    90,   291,   167,   230,   231,   358,
   359,   289,    91,    60,    92,    93,    94,    95,    96,    97,
    98,    99,   150,   224,   353,   151,   225,   226,   227,   228,
   354,   355,   356,   357,   102,   103,   104,   234,   235,   334,
   386,   387,   105,   106,   251,   107,   191,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   188,   274,   306,   346,
   153,   154,   155,   156,   118,   119,   242,   301,   120,   121,
   178,   179,   299
};

static const short yypact[] = {-32768,
    33,-32768,-32768,-32768,-32768,-32768,-32768,     3,-32768,   -33,
    38,-32768,   -24,    33,-32768,    65,    69,-32768,   -40,    78,
-32768,    27,-32768,    82,-32768,    96,-32768,-32768,-32768,    24,
-32768,   113,   109,   -20,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,     4,-32768,-32768,-32768,-32768,   -19,     1,
   119,-32768,-32768,   129,-32768,   135,   137,   146,   113,   520,
   150,-32768,   -18,   151,   152,-32768,-32768,   156,   157,-32768,
   159,   161,   164,    59,   100,-32768,   165,   167,   382,   261,
-32768,-32768,-32768,-32768,-32768,-32768,   155,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   703,-32768,-32768,   153,
   170,   171,-32768,-32768,-32768,-32768,   583,-32768,-32768,   175,
-32768,-32768,-32768,-32768,-32768,-32768,   177,   723,-32768,-32768,
   178,    28,   181,-32768,   109,-32768,   185,   113,-32768,-32768,
   845,   845,-32768,   187,-32768,   197,-32768,   845,   744,-32768,
   517,-32768,-32768,   845,-32768,   845,   845,   845,   866,-32768,
-32768,   636,-32768,-32768,     9,-32768,-32768,   845,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    -9,-32768,-32768,-32768,-32768,
-32768,   188,-32768,   210,   845,-32768,   944,   198,-32768,    25,
-32768,   201,   176,   150,-32768,   113,-32768,  1418,    43,   134,
   845,-32768,-32768,   213,   703,   972,   845,   585,   142,    49,
    49,-32768,   634,  1418,-32768,   845,   845,   845,   845,   845,
   845,   845,   845,   845,   845,   845,-32768,   845,   845,   845,
   845,   845,  1345,   845,   845,   845,   845,   845,   207,    47,
   180,   -10,   209,   216,-32768,   703,   796,-32768,-32768,-32768,
-32768,   204,   150,   211,   765,-32768,-32768,-32768,-32768,   583,
     2,  1418,   845,   703,-32768,-32768,   845,  1366,   845,-32768,
-32768,  1418,   436,   436,   436,   436,   436,   436,    49,    49,
    70,   182,   182,   845,  1399,    61,    61,   179,-32768,   162,
   360,   360,   360,   360,   360,   219,   222,-32768,-32768,   765,
    47,   845,   188,   805,-32768,-32768,   845,   703,   845,   845,
    52,-32768,   223,   845,  1418,-32768,-32768,   238,   845,-32768,
   991,-32768,-32768,   408,   162,  1019,-32768,   845,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   200,    -8,-32768,  1418,-32768,
-32768,  1372,-32768,   229,     9,   891,-32768,-32768,-32768,  1393,
   723,-32768,-32768,   176,  1025,   227,   703,  1418,   845,   703,
   845,  1418,   845,   845,   845,   845,   845,    47,   180,   214,
   243,   845,   703,-32768,   242,   150,-32768,   845,-32768,-32768,
-32768,  1293,-32768,-32768,   897,   360,   360,   360,   360,   360,
-32768,    47,    63,   246,   254,   252,-32768,   938,-32768,-32768,
-32768,-32768,-32768,   703,   845,-32768,-32768,   243,   243,   703,
   845,   703,-32768,-32768,  1053,-32768,-32768,-32768,-32768,  1318,
-32768,-32768,   845,   703,  1072,-32768,-32768,   845,  1100,   845,
  1106,   845,  1134,   845,  1153,   845,  1181,   845,  1187,   845,
  1215,   845,  1234,   845,  1262,   845,  1268,   845,  1324,-32768,
   283,   289,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,    -1,   284,-32768,     5,-32768,
   265,-32768,-32768,   -55,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   237,-32768,-32768,   -41,  -242,-32768,-32768,-32768,
-32768,   120,   -31,-32768,-32768,   -54,    19,-32768,-32768,-32768,
-32768,  -277,   -91,-32768,   -92,    89,-32768,-32768,-32768,-32768,
-32768,-32768,    31,-32768,-32768,   114,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    18,-32768,
-32768,  -258,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -61,-32768,    22,   -48,
-32768,-32768,  -121,    32,-32768,-32768,-32768,-32768,-32768,-32768,
   -15,    29,-32768
};


#define	YYLAST		1482


static const short yytable[] = {    11,
   302,    47,   -24,    66,   168,    14,   -26,   -49,   -51,   189,
   190,    21,    11,   331,   174,   173,    31,   152,    14,   292,
   229,   229,   199,    57,    17,   309,   202,   -30,   310,    28,
    29,    58,    21,    50,    18,     2,     3,     4,     5,     6,
     7,   159,   -75,   -75,     9,   218,   240,    53,     9,     9,
     9,   181,     8,    33,   219,   220,   177,   182,    87,    20,
   241,    53,    36,    37,    38,    39,    40,    41,    42,   249,
   287,   288,   187,   221,   222,   341,   194,   196,   342,   218,
   381,   134,   198,   135,   200,   201,    26,   204,   219,   220,
   100,   117,   158,   185,    27,    87,   223,   276,   277,   278,
   279,     9,   255,    31,   397,    87,    34,   221,   222,   214,
   215,   216,   217,   237,   159,   160,   161,   162,   163,   164,
   165,    35,   136,   392,   137,   221,   222,   100,   117,   252,
   248,   215,   216,   217,    44,   258,    46,   100,   117,   406,
   407,   262,    59,   295,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,    62,   275,   308,   307,    63,
   250,   312,   281,   282,   283,   284,   285,    64,   261,   -33,
   218,   122,   335,   101,   -35,   128,   166,   170,   218,   219,
   220,   129,   130,   305,   131,   169,   132,   219,   220,   133,
   138,   311,   139,    87,   171,   314,   172,   316,   221,   222,
   175,   176,   233,   180,   184,   337,   221,   222,   186,   232,
   101,   192,   317,   319,   320,   321,   322,   323,   324,   325,
   101,   193,   236,   244,   239,   100,   117,   245,   329,   286,
   332,   290,   293,   300,    87,   336,   253,   177,   340,   254,
   294,   303,   345,   327,   222,   217,   343,   348,    87,   326,
   347,   -79,    87,   361,   370,   369,   352,   373,   206,   207,
   208,   209,   210,   211,   383,   319,   100,   117,   391,   398,
   389,   212,   213,   214,   215,   216,   217,   399,   400,   177,
   100,   117,   442,   256,   100,   117,   157,   372,   443,   375,
   158,   376,   377,   378,   379,   380,    87,    25,    48,   126,
   388,   403,   367,   247,   382,   328,   345,   408,   101,   411,
   333,   330,   159,   160,   161,   162,   163,   164,   165,   393,
     0,   416,     0,   233,   296,   365,     0,   339,   100,   117,
     0,     0,     0,   405,     0,     0,     0,     0,     0,   410,
     0,     0,   313,     0,     0,    87,     0,     0,    87,   101,
     0,   415,     0,     0,     0,     0,   419,     0,   421,     0,
   423,    87,   425,   101,   427,     0,   429,   101,   431,     0,
   433,     0,   435,     0,   437,     0,   439,   100,   117,     0,
   100,   117,     0,     0,    68,    69,   338,     0,     0,     0,
     0,   384,    87,   100,   117,     0,     0,     0,    87,     0,
    87,     0,   140,   141,   142,     0,   143,   144,     0,     0,
     0,   101,    87,    83,    84,    85,    86,   145,   212,   213,
   214,   215,   216,   217,   100,   117,     0,     0,   384,   384,
   100,   117,   100,   117,   350,   371,     0,     0,   374,     0,
   146,   147,     0,     0,   100,   117,     0,     0,   148,     0,
     9,   390,     0,   206,   207,   208,   209,   210,   211,     0,
   101,     0,     0,   101,     0,     0,   212,   213,   214,   215,
   216,   217,     0,     0,   385,     0,   101,     0,     0,     0,
     0,     0,   404,   208,   209,   210,   211,     0,   409,     0,
   412,     0,     0,     0,   212,   213,   214,   215,   216,   217,
     0,     0,   417,     0,     0,     0,     0,   101,     0,     0,
     0,   385,   385,   101,     0,   101,     0,     0,     0,     0,
    67,     0,    68,    69,     0,     0,     0,   101,    70,    71,
    72,    73,     0,    74,    75,    76,    77,    78,    79,     8,
     0,    80,   157,     0,    81,     0,   197,    46,    82,     0,
     0,    83,    84,    85,    86,     0,     0,     0,    -7,    -7,
    -7,    -7,    -7,    -7,    -7,     0,     0,     0,   159,   160,
   161,   162,   163,   164,   165,     0,     0,     0,     0,     0,
     0,     0,     0,    67,     0,    68,    69,    -7,     9,    -7,
    -7,    70,    71,    72,    73,     0,    74,    75,    76,    77,
    78,    79,     8,     0,    80,     0,     0,    81,   259,     0,
    46,   260,     0,     0,    83,    84,    85,    86,     0,     0,
     0,    -7,    -7,    -7,    -7,    -7,    -7,    -7,     0,     0,
   206,   207,   208,   209,   210,   211,    68,    69,     0,     0,
     0,     0,     0,   212,   213,   214,   215,   216,   217,     0,
    -7,     9,    -7,    -7,   140,   141,   142,     0,     0,   144,
   205,     0,     0,     0,     0,    83,    84,    85,    86,   145,
     0,     0,    -7,    -7,    -7,    -7,    -7,    -7,    -7,     0,
     0,   206,   207,   208,   209,   210,   211,     0,     0,     0,
     0,     0,   146,   147,   212,   213,   214,   215,   216,   217,
   148,    -7,     9,    -7,    -7,    68,    69,     0,     0,     0,
     0,    70,    71,    72,    73,     0,    74,    75,    76,    77,
    78,    79,     8,     0,    80,    68,    69,    81,     0,     0,
    46,     0,     0,     0,    83,    84,    85,    86,     0,     0,
     0,     0,     0,   140,   141,   142,    68,    69,   144,  -244,
     0,     0,     0,     0,    83,    84,    85,    86,   145,     0,
     0,     0,     0,     0,   140,   141,   142,    68,    69,   144,
   195,     9,     0,     0,     0,    83,    84,    85,    86,   145,
     0,   146,   147,     0,     0,   140,   141,   142,     0,   148,
   144,     9,   304,     0,     0,     0,    83,    84,    85,    86,
   145,     0,   146,   147,     0,     0,     0,    68,    69,     0,
   148,     0,     9,     0,     0,     0,     0,     0,     0,   297,
     0,     0,   298,   146,   147,   140,   141,   142,     0,  -153,
   144,   148,     0,     9,     0,     0,    83,    84,    85,    86,
   145,   206,   207,   208,   209,   210,   211,    68,    69,     0,
     0,     0,     0,     0,   212,   213,   214,   215,   216,   217,
     0,     0,     0,   146,   147,   140,   141,   142,    68,    69,
   144,   148,     0,     9,     0,     0,    83,    84,    85,    86,
   145,     0,     0,     0,     0,     0,   140,   141,   142,     0,
     0,   144,     0,     0,     0,     0,     0,    83,    84,    85,
    86,   203,     0,   146,   147,     0,     0,     0,     0,     0,
     0,   148,     0,     9,   362,     0,     0,   363,     0,     0,
   395,     0,     0,   396,   146,   147,     0,     0,     0,     0,
     0,     0,   148,     0,     9,     0,   206,   207,   208,   209,
   210,   211,   206,   207,   208,   209,   210,   211,     0,   212,
   213,   214,   215,   216,   217,   212,   213,   214,   215,   216,
   217,   401,     0,     0,   402,     0,     0,   238,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   206,   207,   208,   209,   210,   211,   206,
   207,   208,   209,   210,   211,   257,   212,   213,   214,   215,
   216,   217,   212,   213,   214,   215,   216,   217,     0,     0,
     0,     0,     0,     0,   349,     0,     0,   206,   207,   208,
   209,   210,   211,     0,     0,     0,     0,     0,     0,     0,
   212,   213,   214,   215,   216,   217,   206,   207,   208,   209,
   210,   211,   351,     0,     0,     0,     0,     0,   368,   212,
   213,   214,   215,   216,   217,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   206,   207,   208,   209,   210,   211,
   206,   207,   208,   209,   210,   211,   413,   212,   213,   214,
   215,   216,   217,   212,   213,   214,   215,   216,   217,     0,
     0,     0,     0,     0,     0,   418,     0,     0,   206,   207,
   208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     0,   212,   213,   214,   215,   216,   217,   206,   207,   208,
   209,   210,   211,   420,     0,     0,     0,     0,     0,   422,
   212,   213,   214,   215,   216,   217,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   206,   207,   208,   209,   210,
   211,   206,   207,   208,   209,   210,   211,   424,   212,   213,
   214,   215,   216,   217,   212,   213,   214,   215,   216,   217,
     0,     0,     0,     0,     0,     0,   426,     0,     0,   206,
   207,   208,   209,   210,   211,     0,     0,     0,     0,     0,
     0,     0,   212,   213,   214,   215,   216,   217,   206,   207,
   208,   209,   210,   211,   428,     0,     0,     0,     0,     0,
   430,   212,   213,   214,   215,   216,   217,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   206,   207,   208,   209,
   210,   211,   206,   207,   208,   209,   210,   211,   432,   212,
   213,   214,   215,   216,   217,   212,   213,   214,   215,   216,
   217,     0,     0,     0,     0,     0,     0,   434,     0,     0,
   206,   207,   208,   209,   210,   211,     0,     0,     0,     0,
     0,     0,     0,   212,   213,   214,   215,   216,   217,   206,
   207,   208,   209,   210,   211,   436,     0,     0,     0,     0,
     0,   438,   212,   213,   214,   215,   216,   217,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   206,   207,   208,
   209,   210,   211,   206,   207,   208,   209,   210,   211,   394,
   212,   213,   214,   215,   216,   217,   212,   213,   214,   215,
   216,   217,     0,     0,     0,     0,     0,     0,   206,   207,
   208,   209,   210,   211,   414,     0,     0,     0,     0,     0,
   440,   212,   213,   214,   215,   216,   217,     0,     0,     0,
     0,     0,     0,   206,   207,   208,   209,   210,   211,   206,
   207,   208,   209,   210,   211,   280,   212,   213,   214,   215,
   216,   217,   212,   213,   214,   215,   216,   217,     0,     0,
   206,   207,   208,   209,   210,   211,   315,     0,     0,     0,
     0,     0,   360,   212,   213,   214,   215,   216,   217,     0,
     0,   206,   207,   208,   209,   210,   211,   206,   207,   208,
   209,   210,   211,   364,   212,   213,   214,   215,   216,   217,
   212,   213,   214,   215,   216,   217,   318,     0,   206,   207,
   208,   209,   210,   211,   206,   207,   208,   209,   210,   211,
     0,   212,   213,   214,   215,   216,   217,   212,   213,   214,
   215,   216,   217,   206,   207,   208,   209,   210,   211,     0,
     0,     0,     0,     0,     0,     0,   212,   213,   214,   215,
   216,   217
};

static const short yycheck[] = {     1,
   243,    33,    27,    59,    97,     1,    27,    27,    27,   131,
   132,    13,    14,   291,   107,   107,    26,    79,    14,    30,
    30,    30,   144,    23,    22,    24,   148,    24,    27,    70,
    71,    31,    34,    30,    68,     3,     4,     5,     6,     7,
     8,    52,    52,    52,    69,    37,    22,    49,    69,    69,
    69,    24,    20,    27,    46,    47,   118,    30,    60,    22,
    36,    63,    39,    40,    41,    42,    43,    44,    45,    27,
    24,    25,   128,    65,    66,    24,   138,   139,    27,    37,
   358,    23,   144,    25,   146,   147,    22,   149,    46,    47,
    60,    60,    30,   125,    26,    97,   158,   219,   220,   221,
   222,    69,   195,    26,   382,   107,    25,    65,    66,    61,
    62,    63,    64,   175,    52,    53,    54,    55,    56,    57,
    58,    26,    23,   366,    25,    65,    66,    97,    97,   191,
   186,    62,    63,    64,    22,   197,    28,   107,   107,   398,
   399,   203,    24,   236,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,    27,   218,   250,   250,    25,
    27,   254,   224,   225,   226,   227,   228,    31,    27,    24,
    37,    22,   294,    60,    24,    24,    22,    25,    37,    46,
    47,    26,    26,   245,    26,    97,    26,    46,    47,    26,
    26,   253,    26,   195,    25,   257,    26,   259,    65,    66,
    26,    25,   172,    26,    24,   298,    65,    66,    24,    22,
    97,    25,   274,    52,    53,    54,    55,    56,    57,    58,
   107,    25,    13,    23,    27,   195,   195,    52,   290,    23,
   292,    52,    24,    30,   236,   297,    24,   299,   300,    27,
    25,    31,   304,    22,    66,    64,    24,   309,   250,    31,
    13,    52,   254,    25,   347,    29,   318,   350,    46,    47,
    48,    49,    50,    51,    22,    52,   236,   236,    27,    24,
   363,    59,    60,    61,    62,    63,    64,    24,    27,   341,
   250,   250,     0,   195,   254,   254,    26,   349,     0,   351,
    30,   353,   354,   355,   356,   357,   298,    14,    34,    63,
   362,   394,   344,   184,   359,   287,   368,   400,   195,   402,
   293,   290,    52,    53,    54,    55,    56,    57,    58,   368,
    -1,   414,    -1,   293,   236,   341,    -1,   299,   298,   298,
    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,   401,
    -1,    -1,   254,    -1,    -1,   347,    -1,    -1,   350,   236,
    -1,   413,    -1,    -1,    -1,    -1,   418,    -1,   420,    -1,
   422,   363,   424,   250,   426,    -1,   428,   254,   430,    -1,
   432,    -1,   434,    -1,   436,    -1,   438,   347,   347,    -1,
   350,   350,    -1,    -1,     3,     4,   298,    -1,    -1,    -1,
    -1,   361,   394,   363,   363,    -1,    -1,    -1,   400,    -1,
   402,    -1,    21,    22,    23,    -1,    25,    26,    -1,    -1,
    -1,   298,   414,    32,    33,    34,    35,    36,    59,    60,
    61,    62,    63,    64,   394,   394,    -1,    -1,   398,   399,
   400,   400,   402,   402,    27,   347,    -1,    -1,   350,    -1,
    59,    60,    -1,    -1,   414,   414,    -1,    -1,    67,    -1,
    69,   363,    -1,    46,    47,    48,    49,    50,    51,    -1,
   347,    -1,    -1,   350,    -1,    -1,    59,    60,    61,    62,
    63,    64,    -1,    -1,   361,    -1,   363,    -1,    -1,    -1,
    -1,    -1,   394,    48,    49,    50,    51,    -1,   400,    -1,
   402,    -1,    -1,    -1,    59,    60,    61,    62,    63,    64,
    -1,    -1,   414,    -1,    -1,    -1,    -1,   394,    -1,    -1,
    -1,   398,   399,   400,    -1,   402,    -1,    -1,    -1,    -1,
     1,    -1,     3,     4,    -1,    -1,    -1,   414,     9,    10,
    11,    12,    -1,    14,    15,    16,    17,    18,    19,    20,
    -1,    22,    26,    -1,    25,    -1,    30,    28,    29,    -1,
    -1,    32,    33,    34,    35,    -1,    -1,    -1,    39,    40,
    41,    42,    43,    44,    45,    -1,    -1,    -1,    52,    53,
    54,    55,    56,    57,    58,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     1,    -1,     3,     4,    68,    69,    70,
    71,     9,    10,    11,    12,    -1,    14,    15,    16,    17,
    18,    19,    20,    -1,    22,    -1,    -1,    25,    24,    -1,
    28,    27,    -1,    -1,    32,    33,    34,    35,    -1,    -1,
    -1,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    46,    47,    48,    49,    50,    51,     3,     4,    -1,    -1,
    -1,    -1,    -1,    59,    60,    61,    62,    63,    64,    -1,
    68,    69,    70,    71,    21,    22,    23,    -1,    -1,    26,
    25,    -1,    -1,    -1,    -1,    32,    33,    34,    35,    36,
    -1,    -1,    39,    40,    41,    42,    43,    44,    45,    -1,
    -1,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
    -1,    -1,    59,    60,    59,    60,    61,    62,    63,    64,
    67,    68,    69,    70,    71,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    -1,    14,    15,    16,    17,
    18,    19,    20,    -1,    22,     3,     4,    25,    -1,    -1,
    28,    -1,    -1,    -1,    32,    33,    34,    35,    -1,    -1,
    -1,    -1,    -1,    21,    22,    23,     3,     4,    26,    27,
    -1,    -1,    -1,    -1,    32,    33,    34,    35,    36,    -1,
    -1,    -1,    -1,    -1,    21,    22,    23,     3,     4,    26,
    27,    69,    -1,    -1,    -1,    32,    33,    34,    35,    36,
    -1,    59,    60,    -1,    -1,    21,    22,    23,    -1,    67,
    26,    69,    28,    -1,    -1,    -1,    32,    33,    34,    35,
    36,    -1,    59,    60,    -1,    -1,    -1,     3,     4,    -1,
    67,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    24,
    -1,    -1,    27,    59,    60,    21,    22,    23,    -1,    25,
    26,    67,    -1,    69,    -1,    -1,    32,    33,    34,    35,
    36,    46,    47,    48,    49,    50,    51,     3,     4,    -1,
    -1,    -1,    -1,    -1,    59,    60,    61,    62,    63,    64,
    -1,    -1,    -1,    59,    60,    21,    22,    23,     3,     4,
    26,    67,    -1,    69,    -1,    -1,    32,    33,    34,    35,
    36,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    -1,
    -1,    26,    -1,    -1,    -1,    -1,    -1,    32,    33,    34,
    35,    36,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    69,    24,    -1,    -1,    27,    -1,    -1,
    24,    -1,    -1,    27,    59,    60,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    -1,    69,    -1,    46,    47,    48,    49,
    50,    51,    46,    47,    48,    49,    50,    51,    -1,    59,
    60,    61,    62,    63,    64,    59,    60,    61,    62,    63,
    64,    24,    -1,    -1,    27,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    46,    47,    48,    49,    50,    51,    46,
    47,    48,    49,    50,    51,    24,    59,    60,    61,    62,
    63,    64,    59,    60,    61,    62,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    46,    47,    48,
    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    60,    61,    62,    63,    64,    46,    47,    48,    49,
    50,    51,    24,    -1,    -1,    -1,    -1,    -1,    24,    59,
    60,    61,    62,    63,    64,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    46,    47,    48,    49,    50,    51,
    46,    47,    48,    49,    50,    51,    24,    59,    60,    61,
    62,    63,    64,    59,    60,    61,    62,    63,    64,    -1,
    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    46,    47,
    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    60,    61,    62,    63,    64,    46,    47,    48,
    49,    50,    51,    24,    -1,    -1,    -1,    -1,    -1,    24,
    59,    60,    61,    62,    63,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    49,    50,
    51,    46,    47,    48,    49,    50,    51,    24,    59,    60,
    61,    62,    63,    64,    59,    60,    61,    62,    63,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    46,
    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    60,    61,    62,    63,    64,    46,    47,
    48,    49,    50,    51,    24,    -1,    -1,    -1,    -1,    -1,
    24,    59,    60,    61,    62,    63,    64,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    49,
    50,    51,    46,    47,    48,    49,    50,    51,    24,    59,
    60,    61,    62,    63,    64,    59,    60,    61,    62,    63,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,
    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    60,    61,    62,    63,    64,    46,
    47,    48,    49,    50,    51,    24,    -1,    -1,    -1,    -1,
    -1,    24,    59,    60,    61,    62,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
    49,    50,    51,    46,    47,    48,    49,    50,    51,    27,
    59,    60,    61,    62,    63,    64,    59,    60,    61,    62,
    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,
    48,    49,    50,    51,    27,    -1,    -1,    -1,    -1,    -1,
    27,    59,    60,    61,    62,    63,    64,    -1,    -1,    -1,
    -1,    -1,    -1,    46,    47,    48,    49,    50,    51,    46,
    47,    48,    49,    50,    51,    31,    59,    60,    61,    62,
    63,    64,    59,    60,    61,    62,    63,    64,    -1,    -1,
    46,    47,    48,    49,    50,    51,    31,    -1,    -1,    -1,
    -1,    -1,    31,    59,    60,    61,    62,    63,    64,    -1,
    -1,    46,    47,    48,    49,    50,    51,    46,    47,    48,
    49,    50,    51,    31,    59,    60,    61,    62,    63,    64,
    59,    60,    61,    62,    63,    64,    38,    -1,    46,    47,
    48,    49,    50,    51,    46,    47,    48,    49,    50,    51,
    -1,    59,    60,    61,    62,    63,    64,    59,    60,    61,
    62,    63,    64,    46,    47,    48,    49,    50,    51,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61,    62,
    63,    64
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 247 "../../../../src/sdrc/sl.y"
{
			;
    break;}
case 2:
#line 250 "../../../../src/sdrc/sl.y"
{
			;
    break;}
case 3:
#line 256 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_UNIFORM;
			;
    break;}
case 4:
#line 261 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_VARYING;
			;
    break;}
case 5:
#line 265 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	0;
			;
    break;}
case 6:
#line 273 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_EXTERN;
			;
    break;}
case 7:
#line 277 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	0;
			;
    break;}
case 8:
#line 284 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_OUTPUT;
			;
    break;}
case 9:
#line 288 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	0;
			;
    break;}
case 10:
#line 295 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_FLOAT;
			;
    break;}
case 11:
#line 300 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_VECTOR | SLC_VCOLOR;
			;
    break;}
case 12:
#line 305 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_VECTOR | SLC_VVECTOR;
			;
    break;}
case 13:
#line 310 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_VECTOR | SLC_VNORMAL;
			;
    break;}
case 14:
#line 315 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_VECTOR | SLC_VPOINT;
			;
    break;}
case 15:
#line 320 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_MATRIX;
			;
    break;}
case 16:
#line 325 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	SLC_STRING | SLC_UNIFORM;
			;
    break;}
case 17:
#line 335 "../../../../src/sdrc/sl.y"
{
				yyval.integer	=	yyvsp[-3].integer | yyvsp[-2].integer | yyvsp[-1].integer | yyvsp[0].integer;
				sdr->desire(yyval.integer);
			;
    break;}
case 18:
#line 353 "../../../../src/sdrc/sl.y"
{
		;
    break;}
case 19:
#line 357 "../../../../src/sdrc/sl.y"
{
		;
    break;}
case 20:
#line 374 "../../../../src/sdrc/sl.y"
{
			CFunction	*thisFunction	=	sdr->newFunction(yyvsp[-1].string);
			
			if (yyvsp[-2].integer & (SLC_OUTPUT | SLC_EXTERN | SLC_RDONLY)) {
				sdr->error("Invalid return type for function %s\n",yyvsp[-1].string);
				yyvsp[-2].integer	&=	~(SLC_OUTPUT | SLC_EXTERN | SLC_RDONLY);
			}

			thisFunction->returnValue	=	new CParameter(yyvsp[-1].string,yyvsp[-2].integer,1);

			sdr->undesire();
		;
    break;}
case 21:
#line 390 "../../../../src/sdrc/sl.y"
{
			CFunction	*thisFunction	=	sdr->newFunction(yyvsp[-1].string);
			
			thisFunction->returnValue	=	NULL;
		;
    break;}
case 22:
#line 402 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun		=	sdr->popFunction();

			cFun->initExpression	=	yyvsp[-2].code;
			cFun->code				=	yyvsp[0].code;

			if (cFun->returnValue != NULL)
				if (cFun->returnValueGiven == FALSE) 
					sdr->error("Return value not given for %s\n",cFun->symbolName);

		;
    break;}
case 23:
#line 420 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 24:
#line 424 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CNullExpression;
		;
    break;}
case 25:
#line 436 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-2].code,yyvsp[0].code);
		;
    break;}
case 26:
#line 442 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[-1].code;
		;
    break;}
case 27:
#line 447 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 28:
#line 456 "../../../../src/sdrc/sl.y"
{
			int	type	=	sdr->desired();

			if (type & (SLC_EXTERN)) {
				sdr->error("Invalid parameter type\n");
				type	&=	~(SLC_EXTERN);
			}

			if (type & SLC_OUTPUT) {
				sdr->undesire();
				sdr->desire(type);					// Make sure we mark the desired type as READ-ONLY
			} else {
				sdr->undesire();
				sdr->desire(type | SLC_RDONLY);		// Make sure we mark the desired type as READ-ONLY
			}
		;
    break;}
case 29:
#line 473 "../../../../src/sdrc/sl.y"
{
			yyval.code					=	yyvsp[0].code;
			sdr->undesire();						// We're done with the type
		;
    break;}
case 30:
#line 483 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter;
			
			cParameter	=	sdr->newParameter(yyvsp[0].string,sdr->desired(),1);	// Add the Parameter to the current CFunction
		;
    break;}
case 31:
#line 490 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 32:
#line 495 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter;
			
			cParameter	=	sdr->newParameter(yyvsp[0].string,sdr->desired(),1);
	
			yyval.code			=	new CNullExpression;
		;
    break;}
case 33:
#line 506 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter;
			
			cParameter	=	sdr->newParameter(yyvsp[-2].string,sdr->desired() | SLC_ARRAY,-1);
		;
    break;}
case 34:
#line 513 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 35:
#line 521 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter;
			
			cParameter	=	sdr->newParameter(yyvsp[-3].string,sdr->desired() | SLC_ARRAY, atoi(yyvsp[-1].string));
			
			if (cParameter->numItems <= 0) {
				sdr->error("Array size for %s is invalid (%s)\n",yyvsp[-3].string,yyvsp[-1].string);
				cParameter->numItems	=	1;
			}
		;
    break;}
case 36:
#line 533 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 37:
#line 540 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter;
			
			cParameter	=	sdr->newParameter(yyvsp[-2].string,sdr->desired() | SLC_ARRAY, -1);
			
			yyval.code	=	new CNullExpression;
		;
    break;}
case 38:
#line 552 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter;
			
			cParameter	=	sdr->newParameter(yyvsp[-3].string,sdr->desired() | SLC_ARRAY, atoi(yyvsp[-1].string));
			
			if (cParameter->numItems <= 0) {
				sdr->error("Array size for %s is invalid (%s)\n",yyvsp[-3].string,yyvsp[-1].string);
				cParameter->numItems	=	1;
			}

			yyval.code	=	new CNullExpression;
		;
    break;}
case 39:
#line 573 "../../../../src/sdrc/sl.y"
{
			CFunction		*mainFunction	=	sdr->newFunction(constantShaderMain);

			mainFunction->returnValue		=	NULL;

			sdr->shaderName					=	strdup(yyvsp[-1].string);
			sdr->shaderType					=	yyvsp[-2].integer;
			sdr->shaderFunction				=	mainFunction;
		;
    break;}
case 40:
#line 584 "../../../../src/sdrc/sl.y"
{
			sdr->restoreParameters();
		;
    break;}
case 41:
#line 588 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun			=	sdr->popFunction();
			CParameter	*cParameter;

			for (cParameter=cFun->parameters->first();cParameter!=NULL;cParameter=cFun->parameters->next()) {
				sdr->variables->push(cParameter);
			}

			assert(cFun == sdr->shaderFunction);

			cFun->initExpression	=	yyvsp[-3].code;
			cFun->code				=	yyvsp[0].code;
		;
    break;}
case 42:
#line 606 "../../../../src/sdrc/sl.y"
{
			yyval.integer	=	SLC_SURFACE;
		;
    break;}
case 43:
#line 611 "../../../../src/sdrc/sl.y"
{
			yyval.integer	=	SLC_DISPLACEMENT;
		;
    break;}
case 44:
#line 616 "../../../../src/sdrc/sl.y"
{
			yyval.integer	=	SLC_LIGHT;
		;
    break;}
case 45:
#line 621 "../../../../src/sdrc/sl.y"
{
			yyval.integer	=	SLC_VOLUME;
		;
    break;}
case 46:
#line 626 "../../../../src/sdrc/sl.y"
{
			yyval.integer	=	SLC_TRANSFORMATION;
		;
    break;}
case 47:
#line 631 "../../../../src/sdrc/sl.y"
{
			yyval.integer	=	SLC_IMAGER;
		;
    break;}
case 48:
#line 640 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 49:
#line 644 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CNullExpression;
		;
    break;}
case 50:
#line 655 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-2].code,yyvsp[0].code);
		;
    break;}
case 51:
#line 661 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[-1].code;
		;
    break;}
case 52:
#line 666 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 53:
#line 675 "../../../../src/sdrc/sl.y"
{
			int	type	=	yyvsp[0].integer;

			if (type & SLC_VARYING) {
			} else {
				type |= SLC_UNIFORM;
			}

			sdr->undesire();
			sdr->desire(type);
		;
    break;}
case 54:
#line 687 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		
			if (yyvsp[-2].integer & (SLC_EXTERN)) {
				sdr->error("Invalid parameter type for the shader\n");
			}

			sdr->undesire();
		;
    break;}
case 55:
#line 703 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	getAssignment(sdr->variableList,yyvsp[0].expression);
		;
    break;}
case 56:
#line 709 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	getAssignment(sdr->variableList,yyvsp[0].array);
		;
    break;}
case 57:
#line 718 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter	=	sdr->newParameter(yyvsp[-1].string,sdr->desired() | SLC_PARAMETER,1);

			sdr->variableList->push(cParameter);	// Save the parameter so that we can generate init code later
		;
    break;}
case 58:
#line 724 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 59:
#line 729 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter	=	sdr->newParameter(yyvsp[0].string,sdr->desired() | SLC_PARAMETER,1);

			sdr->variableList->push(cParameter);
		;
    break;}
case 60:
#line 735 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 61:
#line 744 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter	=	sdr->newParameter(yyvsp[-4].string,sdr->desired() | SLC_PARAMETER | SLC_ARRAY,atoi(yyvsp[-2].string));

			if (cParameter->numItems <= 0) {
				sdr->error("Array size for %s is invalid (%s)\n",yyvsp[-4].string,yyvsp[-2].string);
				cParameter->numItems	=	1;
			}

			sdr->variableList->push(cParameter);
		;
    break;}
case 62:
#line 755 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 63:
#line 763 "../../../../src/sdrc/sl.y"
{
			CParameter	*cParameter	=	sdr->newParameter(yyvsp[-3].string,sdr->desired() | SLC_PARAMETER | SLC_ARRAY,atoi(yyvsp[-1].string));

			// Get the parameter
			if (cParameter->numItems <= 0)	{
				sdr->error("Array size for %s is invalid (%s)\n",yyvsp[-3].string,yyvsp[-1].string);
				cParameter->numItems	=	1;
			}

			sdr->variableList->push(cParameter);
		;
    break;}
case 64:
#line 775 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 65:
#line 780 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CNullExpression;
		;
    break;}
case 66:
#line 788 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 67:
#line 795 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-2].code,yyvsp[0].code);
		;
    break;}
case 68:
#line 805 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->newFunction(constantBlockName);
		;
    break;}
case 69:
#line 810 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			cFun->code			=	yyvsp[-1].code;

			yyval.code	=	new	CFuncallExpression(cFun,NULL);
		;
    break;}
case 70:
#line 826 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar;

			if (yyvsp[-1].integer & (SLC_OUTPUT | SLC_RDONLY)) {
				sdr->error("Invalid container class for local variables\n");
			}

			// Remove the uninitialized variables from the list
			while((cVar = (CVariable *) sdr->variableList->pop()) != NULL);

			sdr->undesire();

			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 71:
#line 847 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	getAssignment(sdr->variableList,yyvsp[0].expression);
		;
    break;}
case 72:
#line 853 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	getAssignment(sdr->variableList,yyvsp[0].array);
		;
    break;}
case 73:
#line 860 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar;

			cVar	=	sdr->newVariable(yyvsp[0].string,sdr->desired(),1);

			sdr->variableList->push(cVar);
		;
    break;}
case 74:
#line 868 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 75:
#line 873 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar;

			cVar	=	sdr->newVariable(yyvsp[0].string,sdr->desired(),1);

			sdr->variableList->push(cVar);
		;
    break;}
case 76:
#line 882 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-1].code,yyvsp[0].code);
		;
    break;}
case 77:
#line 891 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar;

			cVar	=	sdr->newVariable(yyvsp[-3].string,sdr->desired() | SLC_ARRAY,atoi(yyvsp[-1].string));

			if (cVar->numItems <= 0) {
				sdr->error("Array size is invalid for %s (%s)\n",yyvsp[-3].string,yyvsp[-1].string);
				cVar->numItems	=	1;
			}

			sdr->variableList->push(cVar);
		;
    break;}
case 78:
#line 904 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 79:
#line 912 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar;

			cVar	=	sdr->newVariable(yyvsp[-3].string,sdr->desired() | SLC_ARRAY,atoi(yyvsp[-1].string));

		
			if (cVar->numItems <= 0) {
				sdr->error("Array size is invalid for %s (%s)\n",yyvsp[-3].string,yyvsp[-1].string);
				cVar->numItems	=	1;
			}

			sdr->variableList->push(cVar);
		;
    break;}
case 80:
#line 928 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-1].code,yyvsp[0].code);
		;
    break;}
case 81:
#line 936 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 82:
#line 941 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CNullExpression;
		;
    break;}
case 83:
#line 951 "../../../../src/sdrc/sl.y"
{

			yyval.code	=	yyvsp[0].code;
			assert(sdr->desired() & SLC_NONE);
		;
    break;}
case 84:
#line 958 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
			assert(sdr->desired() & SLC_NONE);
		;
    break;}
case 85:
#line 964 "../../../../src/sdrc/sl.y"
{
			// Recoverable error happened
			yyval.code	=	new CNullExpression;
			assert(sdr->desired() & SLC_NONE);
		;
    break;}
case 86:
#line 975 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-1].code,yyvsp[0].code);
		;
    break;}
case 87:
#line 979 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CNullExpression;
		;
    break;}
case 88:
#line 989 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 89:
#line 994 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 90:
#line 999 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 91:
#line 1004 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 92:
#line 1009 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[-1].expression;
		;
    break;}
case 93:
#line 1014 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[-1].expression;
		;
    break;}
case 94:
#line 1019 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 95:
#line 1024 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 96:
#line 1029 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 97:
#line 1034 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 98:
#line 1039 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 99:
#line 1044 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 100:
#line 1049 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 101:
#line 1054 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 102:
#line 1059 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CNullExpression;
		;
    break;}
case 103:
#line 1064 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[-1].expression;
		;
    break;}
case 104:
#line 1069 "../../../../src/sdrc/sl.y"
{
			yyval.code					=	new CNullExpression;
		;
    break;}
case 105:
#line 1078 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 106:
#line 1083 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 107:
#line 1088 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 108:
#line 1093 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 109:
#line 1098 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 110:
#line 1103 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 111:
#line 1108 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 112:
#line 1117 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFunction;
			int			bc;
			char		tmp[256];

			if (sscanf(yyvsp[-1].string,"%d",&bc) != 1) sdr->error("Invalid break count: %s\n",yyvsp[-1].string);

			if (bc <= 0) sdr->error("Bad break count: %s\n",yyvsp[-1].string);

			for(cFunction = sdr->functionStack->last(); cFunction != NULL; cFunction = sdr->functionStack->prev()) {
				if (strcmp(cFunction->symbolName,constantLoopName) == 0) bc--;
				else if (strcmp(cFunction->symbolName,constantBlockName) == 0) continue;

				if (bc == 0) break;

				sdr->error("Break target not found\n");
				break;
			}

			if (cFunction == NULL) sdr->error("Break target not found\n");

			sprintf(tmp,"%s\t%s\n",opcodeBreak,yyvsp[-1].string);

			yyval.code	=	new CFixedExpression(tmp);
		;
    break;}
case 113:
#line 1144 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFunction;
			char		tmp[256];
			int			bc	=	(int) 1;

			sdr->functionStack->push(sdr->lastFunction);
			for(cFunction = sdr->functionStack->last(); cFunction != NULL; cFunction = sdr->functionStack->prev()) {
				if (strcmp(cFunction->symbolName,constantLoopName) == 0) bc--;
				else if (strcmp(cFunction->symbolName,constantBlockName) == 0) continue;

				if (bc == 0) break;

				sdr->error("Break target not found\n");
				break;
			}
			sdr->lastFunction	=	sdr->functionStack->pop();

			if (cFunction == NULL) sdr->error("Break target not found\n");

			sprintf(tmp,"%s\t1\n",opcodeBreak);

			yyval.code	=	new CFixedExpression(tmp);
		;
    break;}
case 114:
#line 1173 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFunction;
			char		tmp[256];
			int			bc;

			if (sscanf(yyvsp[-1].string,"%d",&bc) != 1) sdr->error("Bad continue count: %s\n",yyvsp[-1].string);

			if (bc <= 0) sdr->error("Bad continue count: %s\n",yyvsp[-1].string);

			for(cFunction = sdr->functionStack->last(); cFunction != NULL; cFunction = sdr->functionStack->prev()) {
				if (strcmp(cFunction->symbolName,constantLoopName) == 0) bc--;
				else if (strcmp(cFunction->symbolName,constantBlockName) == 0) continue;

				if (bc == 0) break;

				sdr->error("Continue target not found\n");
				break;
			}

			if (cFunction == NULL) sdr->error("Continue target not found\n");

			sprintf(tmp,"%s\t%s\n",opcodeContinue,yyvsp[-1].string);

			yyval.code	=	new CFixedExpression(tmp);
		;
    break;}
case 115:
#line 1200 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFunction;
			char		tmp[256];
			int			bc	=	(int) 1;

			for(cFunction = sdr->functionStack->last(); cFunction != NULL; cFunction = sdr->functionStack->prev()) {
				if (strcmp(cFunction->symbolName,constantLoopName) == 0) bc--;
				else if (strcmp(cFunction->symbolName,constantBlockName) == 0) continue;

				if (bc == 0) break;
				
				sdr->error("Continue target not found\n");
				break;
			}

			if (cFunction == NULL) sdr->error("Continue target not found\n");

			sprintf(tmp,"%s\t1\n",opcodeContinue);

			yyval.code	=	new CFixedExpression(tmp);
		;
    break;}
case 116:
#line 1227 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->lastFunction;
			CExpression	*c;

			// Skip over loops
			for (cFun = sdr->functionStack->last(); cFun != NULL; cFun = sdr->functionStack->prev()) {
				if (strcmp(cFun->symbolName,constantBlockName) == 0) continue;
				if (strcmp(cFun->symbolName,constantLoopName) == 0) continue;
				break;
			}

			if (cFun ==	NULL) {
				sdr->error("Return target not found\n");
				yyval.code	=	new CNullExpression;
			} else {
				if (cFun->returnValue == NULL) {
					sdr->error("Function %s was not expecting a return value\n",cFun->symbolName);
					c	=	new CNullExpression;
				} else {
					c	=	new CAssignmentExpression(cFun->returnValue,yyvsp[-1].expression);				
				}

				yyval.code	=	c;

				cFun->returnValueGiven	=	TRUE;
			}
		;
    break;}
case 117:
#line 1256 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->lastFunction;

			// Skip over loops
			for (cFun = sdr->functionStack->last(); cFun != NULL; cFun = sdr->functionStack->prev()) {
				if (strcmp(cFun->symbolName,constantBlockName) == 0) continue;
				if (strcmp(cFun->symbolName,constantLoopName) == 0) continue;
				break;
			}

			if (cFun ==	NULL)	sdr->error("Return target not found\n");
			else {
				if (cFun->returnValue != NULL) {
					sdr->error("Function %s was expecting a return value\n",cFun->symbolName);
				}
			}
		;
    break;}
case 118:
#line 1283 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->newFunction(constantLoopName);
			
			yyval.expression	=	yyvsp[-1].expression;	
		;
    break;}
case 119:
#line 1294 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CForLoop(NULL,yyvsp[-1].expression,NULL,yyvsp[0].code);
		;
    break;}
case 120:
#line 1304 "../../../../src/sdrc/sl.y"
{

			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CForLoop(NULL,yyvsp[-1].expression,NULL,yyvsp[0].code);
		;
    break;}
case 121:
#line 1317 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-1].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-1].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 122:
#line 1324 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-3].string);

			if (cVar == NULL) {	
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CAssignmentExpression(cVar,yyvsp[0].expression);
				sdr->undesire();
			}
		;
    break;}
case 123:
#line 1340 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-4].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-4].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 124:
#line 1347 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-6].string);

			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CArrayAssignmentExpression(cVar,yyvsp[-4].expression,yyvsp[0].expression);
				sdr->undesire();
			}
		;
    break;}
case 125:
#line 1364 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-1].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-1].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 126:
#line 1371 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-3].string);

			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CUpdateExpression(cVar,opcodeAddFloatFloat,opcodeAddVectorVector,FALSE,yyvsp[0].expression);
				sdr->undesire();
			}
		;
    break;}
case 127:
#line 1384 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-1].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-1].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 128:
#line 1391 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-3].string);

			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CUpdateExpression(cVar,opcodeSubFloatFloat,opcodeSubVectorVector,FALSE,yyvsp[0].expression);
				sdr->undesire();
			}
		;
    break;}
case 129:
#line 1404 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-1].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-1].string);
			else {
				yyval.expression	=	new CUpdateExpression(cVar,opcodeAddFloatFloat,opcodeAddVectorVector,FALSE,new CConstantTerminalExpression(SLC_FLOAT,strdup("1")));
			}
		;
    break;}
case 130:
#line 1415 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-1].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-1].string);
			else {
				yyval.expression	=	new CUpdateExpression(cVar,opcodeAddFloatFloat,opcodeAddVectorVector,FALSE,new CConstantTerminalExpression(SLC_FLOAT,strdup("-1")));
			}
		;
    break;}
case 131:
#line 1426 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-1].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-1].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 132:
#line 1433 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-3].string);

			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CUpdateExpression(cVar,opcodeMulFloatFloat,opcodeMulVectorVector,FALSE,yyvsp[0].expression);
				sdr->undesire();
			}
		;
    break;}
case 133:
#line 1446 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-1].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-1].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 134:
#line 1453 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-3].string);

			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CUpdateExpression(cVar,opcodeDivFloatFloat,opcodeDivVectorVector,FALSE,yyvsp[0].expression);
				sdr->undesire();
			}
		;
    break;}
case 135:
#line 1469 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-4].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-4].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 136:
#line 1476 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-6].string);
			
			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CArrayUpdateExpression(cVar,yyvsp[-4].expression,yyvsp[0].expression,opcodeAddFloatFloat,opcodeAddVectorVector,opcodeAddMatrixMatrix);
				sdr->undesire();
			}
		;
    break;}
case 137:
#line 1492 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-4].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-4].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 138:
#line 1499 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-6].string);

			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CArrayUpdateExpression(cVar,yyvsp[-4].expression,yyvsp[0].expression,opcodeSubFloatFloat,opcodeSubVectorVector,opcodeSubMatrixMatrix);
				sdr->undesire();
			}
		;
    break;}
case 139:
#line 1515 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-4].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-4].string);
			else {
				yyval.expression	=	new CArrayUpdateExpression(cVar,yyvsp[-2].expression,new CConstantTerminalExpression(SLC_FLOAT,strdup("1")),opcodeAddFloatFloat,opcodeAddVectorVector,opcodeAddMatrixMatrix);
			}
		;
    break;}
case 140:
#line 1529 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-4].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-4].string);
			else {
				yyval.expression	=	new CArrayUpdateExpression(cVar,yyvsp[-2].expression,new CConstantTerminalExpression(SLC_FLOAT,strdup("-1")),opcodeAddFloatFloat,opcodeAddVectorVector,opcodeAddMatrixMatrix);
			}
		;
    break;}
case 141:
#line 1543 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-4].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-4].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 142:
#line 1550 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-6].string);

			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CArrayUpdateExpression(cVar,yyvsp[-4].expression,yyvsp[0].expression,opcodeMulFloatFloat,opcodeMulVectorVector,opcodeMulMatrixMatrix);
				sdr->undesire();
			}
		;
    break;}
case 143:
#line 1566 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar				=	sdr->getVariable(yyvsp[-4].string);

			if (cVar == NULL)	sdr->error("Identifier %s not found\n",yyvsp[-4].string);
			else				sdr->desire(cVar->type);
		;
    break;}
case 144:
#line 1573 "../../../../src/sdrc/sl.y"
{
			CVariable			*cVar		=	sdr->getVariable(yyvsp[-6].string);

			if (cVar == NULL) {
				yyval.expression	=	new CNullExpression;
			} else {
				yyval.expression	=	new CArrayUpdateExpression(cVar,yyvsp[-4].expression,yyvsp[0].expression,opcodeDivFloatFloat,opcodeDivVectorVector,opcodeDivMatrixMatrix);
				sdr->undesire();
			}
		;
    break;}
case 145:
#line 1589 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->newFunction(constantLoopName);
		;
    break;}
case 146:
#line 1603 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CForLoop(yyvsp[-6].code,yyvsp[-4].expression,yyvsp[-2].code,yyvsp[0].code);
		;
    break;}
case 147:
#line 1620 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CForLoop(yyvsp[-6].code,yyvsp[-4].expression,yyvsp[-2].code,yyvsp[0].code);
		;
    break;}
case 148:
#line 1631 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 149:
#line 1635 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CNullExpression;
		;
    break;}
case 150:
#line 1646 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 151:
#line 1651 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].expression;
		;
    break;}
case 152:
#line 1660 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getConversion(SLC_BOOLEAN,yyvsp[0].expression);
		;
    break;}
case 153:
#line 1664 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	new CConstantTerminalExpression(SLC_BOOLEAN | SLC_UNIFORM,strdup("true"));
		;
    break;}
case 154:
#line 1673 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].code;
		;
    break;}
case 155:
#line 1677 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CNullExpression;
		;
    break;}
case 156:
#line 1688 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 157:
#line 1693 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].expression;
		;
    break;}
case 158:
#line 1700 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CTwoExpressions(yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 159:
#line 1705 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	yyvsp[0].expression;
		;
    break;}
case 160:
#line 1720 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CIfThenElse(yyvsp[-4].expression,yyvsp[-2].code,yyvsp[0].code);
		;
    break;}
case 161:
#line 1733 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CIfThenElse(yyvsp[-2].expression,yyvsp[0].code,NULL);
		;
    break;}
case 162:
#line 1744 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CIfThenElse(yyvsp[-4].expression,yyvsp[-2].code,yyvsp[0].code);
		;
    break;}
case 163:
#line 1757 "../../../../src/sdrc/sl.y"
{
			yyval.array->push(yyvsp[0].expression);
		;
    break;}
case 164:
#line 1762 "../../../../src/sdrc/sl.y"
{
			sdr->actualParameters->push(yyvsp[0].expression);
			yyval.array	=	sdr->actualParameters;
		;
    break;}
case 165:
#line 1771 "../../../../src/sdrc/sl.y"
{
			sdr->actualParameterStack->push(sdr->actualParameters);
			sdr->actualParameters	=	new CArray<CExpression *>;
		;
    break;}
case 166:
#line 1777 "../../../../src/sdrc/sl.y"
{
			yyval.array	=	yyvsp[-1].array;
		;
    break;}
case 167:
#line 1789 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CGatherThenElse(yyvsp[-3].array,yyvsp[-2].code,yyvsp[0].code);
			sdr->actualParameters	=	sdr->actualParameterStack->pop();
		;
    break;}
case 168:
#line 1800 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CGatherThenElse(yyvsp[-1].array,yyvsp[0].code,NULL);
			sdr->actualParameters	=	sdr->actualParameterStack->pop();
		;
    break;}
case 169:
#line 1809 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CGatherThenElse(yyvsp[-3].array,yyvsp[-2].code,yyvsp[0].code);
			sdr->actualParameters	=	sdr->actualParameterStack->pop();
		;
    break;}
case 170:
#line 1819 "../../../../src/sdrc/sl.y"
{
			CFunction	*cCFunction	=	sdr->newFunction(constantLoopName);

			sdr->requiredShaderContext	|=	SLC_SURFACE;
		;
    break;}
case 171:
#line 1831 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CIlluminationLoop(NULL,yyvsp[-2].expression,NULL,NULL,yyvsp[0].code);
		;
    break;}
case 172:
#line 1844 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CIlluminationLoop(yyvsp[-4].expression,yyvsp[-2].expression,NULL,NULL,yyvsp[0].code);
		;
    break;}
case 173:
#line 1859 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CIlluminationLoop(NULL,yyvsp[-6].expression,yyvsp[-4].expression,yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 174:
#line 1876 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CIlluminationLoop(yyvsp[-8].expression,yyvsp[-6].expression,yyvsp[-4].expression,yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 175:
#line 1889 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CIlluminationLoop(NULL,yyvsp[-2].expression,NULL,NULL,yyvsp[0].code);
		;
    break;}
case 176:
#line 1902 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CIlluminationLoop(yyvsp[-4].expression,yyvsp[-2].expression,NULL,NULL,yyvsp[0].code);
		;
    break;}
case 177:
#line 1917 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CIlluminationLoop(NULL,yyvsp[-6].expression,yyvsp[-4].expression,yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 178:
#line 1934 "../../../../src/sdrc/sl.y"
{
			CFunction	*cFun	=	sdr->popFunction();

			yyval.code	=	new CIlluminationLoop(yyvsp[-8].expression,yyvsp[-6].expression,yyvsp[-4].expression,yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 179:
#line 1949 "../../../../src/sdrc/sl.y"
{
			sdr->requiredShaderContext	|=	SLC_LIGHT;

			yyval.code	=	new CIlluminateSolar(opcodeIlluminate,opcodeEndIlluminate,yyvsp[-2].expression,NULL,NULL,yyvsp[0].code);
		;
    break;}
case 180:
#line 1964 "../../../../src/sdrc/sl.y"
{
			sdr->requiredShaderContext	|=	SLC_LIGHT;

			yyval.code	=	new CIlluminateSolar(opcodeIlluminate,opcodeEndIlluminate,yyvsp[-6].expression,yyvsp[-4].expression,yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 181:
#line 1977 "../../../../src/sdrc/sl.y"
{
			sdr->requiredShaderContext	|=	SLC_LIGHT;

			yyval.code	=	new CIlluminateSolar(opcodeIlluminate,opcodeEndIlluminate,yyvsp[-2].expression,NULL,NULL,yyvsp[0].code);
		;
    break;}
case 182:
#line 1992 "../../../../src/sdrc/sl.y"
{
			sdr->requiredShaderContext	|=	SLC_LIGHT;

			yyval.code	=	new CIlluminateSolar(opcodeIlluminate,opcodeEndIlluminate,yyvsp[-6].expression,yyvsp[-4].expression,yyvsp[-2].expression,yyvsp[0].code);
		;
    break;}
case 183:
#line 2006 "../../../../src/sdrc/sl.y"
{
			sdr->requiredShaderContext	|=	SLC_LIGHT;

			yyval.code	=	new CIlluminateSolar(opcodeSolar,opcodeEndSolar,NULL,NULL,NULL,yyvsp[0].code);
		;
    break;}
case 184:
#line 2019 "../../../../src/sdrc/sl.y"
{
			sdr->requiredShaderContext	|=	SLC_LIGHT;

			yyval.code	=	new CIlluminateSolar(opcodeSolar,opcodeEndSolar,yyvsp[-4].expression,yyvsp[-2].expression,NULL,yyvsp[0].code);
		;
    break;}
case 185:
#line 2031 "../../../../src/sdrc/sl.y"
{
			sdr->requiredShaderContext	|=	SLC_LIGHT;

			yyval.code	=	new CIlluminateSolar(opcodeSolar,opcodeEndSolar,NULL,NULL,NULL,yyvsp[0].code);
		;
    break;}
case 186:
#line 2044 "../../../../src/sdrc/sl.y"
{
			sdr->requiredShaderContext	|=	SLC_LIGHT;

			yyval.code	=	new CIlluminateSolar(opcodeSolar,opcodeEndSolar,yyvsp[-4].expression,yyvsp[-2].expression,NULL,yyvsp[0].code);
		;
    break;}
case 187:
#line 2055 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	yyvsp[0].expression;
		;
    break;}
case 188:
#line 2062 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeAddFloatFloat,opcodeAddVectorVector,opcodeAddMatrixMatrix,NULL,NULL);
		;
    break;}
case 189:
#line 2069 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeSubFloatFloat,opcodeSubVectorVector,opcodeSubMatrixMatrix,NULL,NULL);
		;
    break;}
case 190:
#line 2076 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	NULL;

			if (yyvsp[-2].expression->type & SLC_MATRIX) {
				if (yyvsp[0].expression->type & SLC_VVECTOR) {
					yyval.expression	=	new CBinaryExpression(SLC_VECTOR | SLC_VVECTOR,opcodeMulMatrixVector,yyvsp[-2].expression,getConversion(SLC_VECTOR,yyvsp[0].expression));
				} else if (yyvsp[0].expression->type & SLC_VPOINT) {
					yyval.expression	=	new CBinaryExpression(SLC_VECTOR | SLC_VPOINT,opcodeMulMatrixPoint,yyvsp[-2].expression,getConversion(SLC_VECTOR,yyvsp[0].expression));
				} else if (yyvsp[0].expression->type & SLC_VNORMAL) {
					yyval.expression	=	new CBinaryExpression(SLC_VECTOR | SLC_VNORMAL,opcodeMulMatrixNormal,yyvsp[-2].expression,getConversion(SLC_VECTOR,yyvsp[0].expression));
				}
			}

			if (yyval.expression == NULL) {
				if (yyvsp[0].expression->type & SLC_MATRIX) {
					if (yyvsp[-2].expression->type & SLC_VVECTOR) {
						yyval.expression	=	new CBinaryExpression(SLC_VECTOR | SLC_VVECTOR,opcodeMulVectorMatrix,yyvsp[-2].expression,getConversion(SLC_VECTOR,yyvsp[0].expression));
					} else if (yyvsp[-2].expression->type & SLC_VPOINT) {
						yyval.expression	=	new CBinaryExpression(SLC_VECTOR | SLC_VPOINT,opcodeMulPointMatrix,yyvsp[-2].expression,getConversion(SLC_VECTOR,yyvsp[0].expression));
					} else if (yyvsp[-2].expression->type & SLC_VNORMAL) {
						yyval.expression	=	new CBinaryExpression(SLC_VECTOR | SLC_VNORMAL,opcodeMulNormalMatrix,yyvsp[-2].expression,getConversion(SLC_VECTOR,yyvsp[0].expression));
					}
				}
			}


			if (yyval.expression == NULL)
				yyval.expression	=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeMulFloatFloat,opcodeMulVectorVector,opcodeMulMatrixMatrix,NULL,NULL);
		;
    break;}
case 191:
#line 2109 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeDivFloatFloat,opcodeDivVectorVector,opcodeDivMatrixMatrix,NULL,NULL);
		;
    break;}
case 192:
#line 2115 "../../../../src/sdrc/sl.y"
{
			sdr->desire(SLC_VECTOR | SLC_VVECTOR);
		;
    break;}
case 193:
#line 2119 "../../../../src/sdrc/sl.y"
{
			sdr->undesire();
			yyval.expression	=	new CBinaryExpression(SLC_FLOAT,opcodeDotProduct,getConversion(SLC_VECTOR,yyvsp[-3].expression),getConversion(SLC_VECTOR,yyvsp[0].expression));
		;
    break;}
case 194:
#line 2127 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	new CBinaryExpression(SLC_VECTOR,opcodeCrossProduct,getConversion(SLC_VECTOR,yyvsp[-2].expression),getConversion(SLC_VECTOR,yyvsp[0].expression));
		;
    break;}
case 195:
#line 2133 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	yyvsp[0].expression;	
		;
    break;}
case 196:
#line 2139 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getOperation(yyvsp[0].expression,opcodeNegFloat,opcodeNegVector,opcodeNegMatrix,NULL,NULL);
		;
    break;}
case 197:
#line 2148 "../../../../src/sdrc/sl.y"
{
			int	ft	=	yyvsp[-2].expression->type;
			int	st	=	yyvsp[0].expression->type;

			if ((yyvsp[-2].expression->type & SLC_TYPE_MASK) == (yyvsp[0].expression->type & SLC_TYPE_MASK)) {
				yyval.expression	=	new CConditionalExpression(yyvsp[-2].expression->type,yyvsp[-4].expression,yyvsp[-2].expression,yyvsp[0].expression);
			} else {
				sdr->error("Type mismatch in conditional execution\n");
			}
		;
    break;}
case 198:
#line 2164 "../../../../src/sdrc/sl.y"
{
			yyval.array	=	yyvsp[-1].array;
		;
    break;}
case 199:
#line 2173 "../../../../src/sdrc/sl.y"
{
			yyval.array	=	yyvsp[0].array;
			yyval.array->push(yyvsp[-2].expression);
		;
    break;}
case 200:
#line 2179 "../../../../src/sdrc/sl.y"
{
			yyval.array	=	new CArray<CExpression *>;
			yyval.array->push(yyvsp[0].expression);
		;
    break;}
case 201:
#line 2187 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	new CConstantTerminalExpression(SLC_FLOAT | SLC_UNIFORM,strdup("3.141592654"));
		;
    break;}
case 202:
#line 2192 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	yyvsp[0].expression;
		;
    break;}
case 203:
#line 2197 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	yyvsp[0].expression;
		;
    break;}
case 204:
#line 2202 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	yyvsp[0].expression;
		;
    break;}
case 205:
#line 2207 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	yyvsp[0].expression;
		;
    break;}
case 206:
#line 2212 "../../../../src/sdrc/sl.y"
{
	
			CVariable	*cVar	=	sdr->getVariable(yyvsp[0].string);

			if (cVar == NULL) {
				sdr->error("Identifier %s not found\n",yyvsp[0].string);
				yyval.expression	=	new CNullExpression;
			} else { 
				yyval.expression	=	new CTerminalExpression(cVar);
			}
		;
    break;}
case 207:
#line 2228 "../../../../src/sdrc/sl.y"
{
			CVariable *cVar	=	sdr->getVariable(yyvsp[-3].string);

			if (cVar == NULL) {
				sdr->error("Identifier %s not found\n",yyvsp[-3].string);
				yyval.expression	=	new CNullExpression;
			} else { 
				yyval.expression	=	new CArrayExpression(cVar,yyvsp[-1].expression);
			}
		;
    break;}
case 208:
#line 2240 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	new CConstantTerminalExpression(SLC_FLOAT,strdup(yyvsp[0].string));
		;
    break;}
case 209:
#line 2245 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	new CConstantTerminalExpression(SLC_STRING,strdup(yyvsp[0].string));
		;
    break;}
case 210:
#line 2256 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	new CVectorExpression(yyvsp[-5].expression,yyvsp[-3].expression,yyvsp[-1].expression);
		;
    break;}
case 211:
#line 2293 "../../../../src/sdrc/sl.y"
{
			CExpression	*elements[16];

			elements[0]		=	yyvsp[-31].expression;
			elements[1]		=	yyvsp[-29].expression;
			elements[2]		=	yyvsp[-27].expression;
			elements[3]		=	yyvsp[-25].expression;
			elements[4]		=	yyvsp[-23].expression;
			elements[5]		=	yyvsp[-21].expression;
			elements[6]		=	yyvsp[-19].expression;
			elements[7]		=	yyvsp[-17].expression;
			elements[8]		=	yyvsp[-15].expression;
			elements[9]		=	yyvsp[-13].expression;
			elements[10]	=	yyvsp[-11].expression;
			elements[11]	=	yyvsp[-9].expression;
			elements[12]	=	yyvsp[-7].expression;
			elements[13]	=	yyvsp[-5].expression;
			elements[14]	=	yyvsp[-3].expression;
			elements[15]	=	yyvsp[-1].expression;

			yyval.expression				=	new CMatrixExpression(elements);
		;
    break;}
case 212:
#line 2319 "../../../../src/sdrc/sl.y"
{	
			yyval.expression	=	yyvsp[-1].expression;
		;
    break;}
case 213:
#line 2328 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getConversion(yyvsp[-1].integer,yyvsp[0].expression);

			sdr->undesire();
		;
    break;}
case 214:
#line 2337 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getConversion(yyvsp[-2].integer,yyvsp[-1].string,yyvsp[0].expression);

			sdr->undesire();
		;
    break;}
case 215:
#line 2348 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	yyvsp[-1].expression;
		;
    break;}
case 216:
#line 2355 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,NULL,NULL,NULL,NULL,opcodeAnd);
		;
    break;}
case 217:
#line 2362 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,NULL,NULL,NULL,NULL,opcodeOr);
		;
    break;}
case 218:
#line 2369 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeFloatGreater,opcodeVectorGreater,NULL,NULL,NULL);
			yyval.expression->type	=	SLC_BOOLEAN | (yyvsp[-2].expression->type & yyvsp[0].expression->type & SLC_UNIFORM);
		;
    break;}
case 219:
#line 2377 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeFloatLess,opcodeVectorLess,NULL,NULL,NULL);
			yyval.expression->type	=	SLC_BOOLEAN | (yyvsp[-2].expression->type & yyvsp[0].expression->type & SLC_UNIFORM);
		;
    break;}
case 220:
#line 2385 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeFloatEGreater,opcodeVectorEGreater,NULL,NULL,NULL);
			yyval.expression->type	=	SLC_BOOLEAN | (yyvsp[-2].expression->type & yyvsp[0].expression->type & SLC_UNIFORM);
		;
    break;}
case 221:
#line 2393 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeFloatELess,opcodeVectorELess,NULL,NULL,NULL);
			yyval.expression->type	=	SLC_BOOLEAN | (yyvsp[-2].expression->type & yyvsp[0].expression->type & SLC_UNIFORM);
		;
    break;}
case 222:
#line 2401 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeFloatEqual,opcodeVectorEqual,NULL,opcodeStringEqual,NULL);
			yyval.expression->type	=	SLC_BOOLEAN | (yyvsp[-2].expression->type & yyvsp[0].expression->type & SLC_UNIFORM);
		;
    break;}
case 223:
#line 2409 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,opcodeFloatNotEqual,opcodeVectorNotEqual,NULL,opcodeStringNotEqual,NULL);
			yyval.expression->type	=	SLC_BOOLEAN | (yyvsp[-2].expression->type & yyvsp[0].expression->type & SLC_UNIFORM);
		;
    break;}
case 224:
#line 2417 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,NULL,NULL,NULL,NULL,opcodeAnd);
			yyval.expression->type	=	SLC_BOOLEAN | (yyvsp[-2].expression->type & yyvsp[0].expression->type & SLC_UNIFORM);
		;
    break;}
case 225:
#line 2425 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	getOperation(yyvsp[-2].expression,yyvsp[0].expression,NULL,NULL,NULL,NULL,opcodeXor);
			yyval.expression->type	=	SLC_BOOLEAN | (yyvsp[-2].expression->type & yyvsp[0].expression->type & SLC_UNIFORM);
		;
    break;}
case 226:
#line 2432 "../../../../src/sdrc/sl.y"
{
			yyval.expression			=	new CUnaryExpression(SLC_BOOLEAN,opcodeNot,getConversion(SLC_BOOLEAN,yyvsp[0].expression));
		;
    break;}
case 227:
#line 2442 "../../../../src/sdrc/sl.y"
{
			CFunctionPrototype		*cFun;
			CArray<CExpression *>	*parameters	=	sdr->actualParameters;	// This is the list of parameters to the function

			char					*funName	=	yyvsp[0].string;

			// Clear the desired type flags
			sdr->undesire();

			// Restore the old parameters
			sdr->actualParameters		=	sdr->actualParameterStack->pop();


			// Check the builtin functions
			for (cFun = sdr->builtinFunctions->first(); cFun != NULL; cFun = sdr->builtinFunctions->next()) {
				if (cFun->perfectMatch(yyvsp[0].string,parameters,sdr->desired())) break;
			}

			if (cFun == NULL) {
				for (cFun = sdr->builtinFunctions->first(); cFun != NULL; cFun = sdr->builtinFunctions->next()) {
					if (cFun->match(yyvsp[0].string,parameters,sdr->desired())) break;
				}
			}

			if (cFun != NULL) {
				yyval.expression	=	new CBuiltinExpression(cFun,parameters);
			} else {
				sdr->error("Function %s not found\n",yyvsp[0].string);
				if (parameters->numItems != 0) {
					CExpression	*cCode;
					while((cCode = parameters->pop()) != NULL) {
						delete cCode;
					}
				}
				delete parameters;
				yyval.expression	=	new CNullExpression;
			}
		;
    break;}
case 228:
#line 2482 "../../../../src/sdrc/sl.y"
{
			yyval.expression	=	yyvsp[0].expression;
		;
    break;}
case 229:
#line 2492 "../../../../src/sdrc/sl.y"
{
			// Save the old parameters
			sdr->actualParameterStack->push(sdr->actualParameters);
			// Start a new parameter list
			sdr->actualParameters	=	new CArray<CExpression *>;

			// Make sure we do not do something stupid with the parameters
			sdr->desire(SLC_NONE);

			// Set the name
			yyval.string	=	yyvsp[-1].string;
		;
    break;}
case 230:
#line 2507 "../../../../src/sdrc/sl.y"
{
			// Save the old parameters
			sdr->actualParameterStack->push(sdr->actualParameters);
			// Start a new parameter list
			sdr->actualParameters	=	new CArray<CExpression *>;

			// Make sure we do not do something stupid with the parameters
			sdr->desire(SLC_NONE);

			// Set the name
			yyval.string	=	"surface";
		;
    break;}
case 231:
#line 2522 "../../../../src/sdrc/sl.y"
{
			// Save the old parameters
			sdr->actualParameterStack->push(sdr->actualParameters);
			// Start a new parameter list
			sdr->actualParameters	=	new CArray<CExpression *>;

			// Make sure we do not do something stupid with the parameters
			sdr->desire(SLC_NONE);

			// Set the name
			yyval.string	=	"displacement";
		;
    break;}
case 232:
#line 2540 "../../../../src/sdrc/sl.y"
{
			CFunction				*cFun;
			CArray<CExpression *>	*parameters	=	sdr->actualParameters;	// This is the list of parameters to the function

			char					*funName	=	yyvsp[-2].string;

			// Clear the desired type flags
			sdr->undesire();

			// Restore the old parameters
			sdr->actualParameters		=	sdr->actualParameterStack->pop();

			// Search for the CFunction here....
			cFun	=	sdr->getFunction(yyvsp[-2].string,parameters);

			if (cFun != NULL) {													// Cool, the function exists
				// A function with the same name is defined ... 
				// Try to match the parameters;
				if (cFun->parameters->numItems == parameters->numItems) {	// The number of parameters match
					// A function with the same name is defined and the number of Parameters match
					yyval.expression	=	new CFuncallExpression(cFun,parameters);					
				}
			}

			// If not found, check the predefined CFunctions
			if (cFun == NULL) {
				CFunctionPrototype	*cFun;
				char				*fName	=	yyvsp[-2].string;
				// Check the builtin CFunctions

				for (cFun = sdr->builtinFunctions->first(); cFun != NULL; cFun = sdr->builtinFunctions->next()) {
					if (cFun->perfectMatch(yyvsp[-2].string,parameters,sdr->desired())) break;
				}

				if (cFun == NULL) {
					for (cFun = sdr->builtinFunctions->first(); cFun != NULL; cFun = sdr->builtinFunctions->next()) {
						if (cFun->match(yyvsp[-2].string,parameters,sdr->desired())) break;
					}
				}

				// Check if there is a DSO implementing this function
				if (cFun == NULL) {
					sdr->enumerateDso(yyvsp[-2].string);

					for (cFun = sdr->builtinFunctions->first(); cFun != NULL; cFun = sdr->builtinFunctions->next()) {
						if (cFun->perfectMatch(yyvsp[-2].string,parameters,sdr->desired())) break;
					}

					if (cFun == NULL) {
						for (cFun = sdr->builtinFunctions->first(); cFun != NULL; cFun = sdr->builtinFunctions->next()) {
							if (cFun->match(yyvsp[-2].string,parameters,sdr->desired())) break;
						}
					}
				}

				if (cFun != NULL) {
					yyval.expression	=	new CBuiltinExpression(cFun,parameters);
				} else {
					sdr->error("Function %s not found\n",yyvsp[-2].string);
					if (parameters->numItems != 0) {
						CExpression	*cCode;
						while((cCode = parameters->pop()) != NULL) {
							delete cCode;
						}
					}
					delete parameters;
					yyval.expression	=	new CNullExpression;
				}

			}
		;
    break;}
case 233:
#line 2617 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CConstantTerminalExpression(SLC_STRING | SLC_UNIFORM,strdup(yyvsp[0].string));
		;
    break;}
case 234:
#line 2622 "../../../../src/sdrc/sl.y"
{
			CVariable	*cVar	=	sdr->getVariable(yyvsp[0].string);

			if (cVar != NULL)	yyval.code	=	new CTerminalExpression(cVar);
			else				yyval.code	=	new CNullExpression;
		;
    break;}
case 235:
#line 2635 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	getConversion(SLC_FLOAT | (yyvsp[-1].expression->type & SLC_UNIFORM),yyvsp[-1].expression);
		;
    break;}
case 236:
#line 2639 "../../../../src/sdrc/sl.y"
{
			yyval.code	=	new CConstantTerminalExpression(SLC_FLOAT | SLC_UNIFORM,strdup("0"));
		;
    break;}
case 237:
#line 2657 "../../../../src/sdrc/sl.y"
{
			// Fake the parameters
			CArray<CExpression *>	*parameters	=	sdr->actualParameters;	// This is the list of parameters to the function
			CArray<CExpression *>	*pl			=	new CArray<CExpression *>;
			CExpression				*cExpression;

			pl->push(yyvsp[-4].code);
			pl->push(yyvsp[-3].code);
			for (cExpression=parameters->first();cExpression!=NULL;cExpression=parameters->next())
				pl->push(cExpression);

			delete parameters;
			sdr->actualParameters	=	pl;

			yyval.string						=	yyvsp[-6].string;
		;
    break;}
case 238:
#line 2679 "../../../../src/sdrc/sl.y"
{
			// Fake the parameters
			CArray<CExpression *>	*parameters	=	sdr->actualParameters;	// This is the list of parameters to the function
			CArray<CExpression *>	*pl			=	new CArray<CExpression *>;
			CExpression				*cExpression;

			pl->push(yyvsp[-2].code);
			pl->push(yyvsp[-1].code);
			for (cExpression=parameters->first();cExpression!=NULL;cExpression=parameters->next())
				pl->push(cExpression);

			delete parameters;
			sdr->actualParameters	=	pl;

			yyval.string						=	yyvsp[-4].string;
		;
    break;}
case 239:
#line 2699 "../../../../src/sdrc/sl.y"
{
			yyval.string	=	"texture";

			// Save the old parameters
			sdr->actualParameterStack->push(sdr->actualParameters);
			// Start a new parameter list
			sdr->actualParameters	=	new CArray<CExpression *>;

			// Make sure we do not do something stupid with the parameters
			sdr->desire(SLC_NONE);
		;
    break;}
case 240:
#line 2712 "../../../../src/sdrc/sl.y"
{
			yyval.string	=	"shadow";

			// Save the old parameters
			sdr->actualParameterStack->push(sdr->actualParameters);
			// Start a new parameter list
			sdr->actualParameters	=	new CArray<CExpression *>;

			// Make sure we do not do something stupid with the parameters
			sdr->desire(SLC_NONE);
		;
    break;}
case 241:
#line 2725 "../../../../src/sdrc/sl.y"
{
			yyval.string	=	"environment";

			// Save the old parameters
			sdr->actualParameterStack->push(sdr->actualParameters);
			// Start a new parameter list
			sdr->actualParameters	=	new CArray<CExpression *>;

			// Make sure we do not do something stupid with the parameters
			sdr->desire(SLC_NONE);
		;
    break;}
case 242:
#line 2738 "../../../../src/sdrc/sl.y"
{
			yyval.string	=	"bump";

			// Save the old parameters
			sdr->actualParameterStack->push(sdr->actualParameters);
			// Start a new parameter list
			sdr->actualParameters	=	new CArray<CExpression *>;

			// Make sure we do not do something stupid with the parameters
			sdr->desire(SLC_NONE);
		;
    break;}
case 243:
#line 2755 "../../../../src/sdrc/sl.y"
{
		;
    break;}
case 244:
#line 2758 "../../../../src/sdrc/sl.y"
{
		;
    break;}
case 245:
#line 2765 "../../../../src/sdrc/sl.y"
{
			sdr->actualParameters->push(yyvsp[-1].expression);
		;
    break;}
case 246:
#line 2769 "../../../../src/sdrc/sl.y"
{
		;
    break;}
case 247:
#line 2773 "../../../../src/sdrc/sl.y"
{
			sdr->actualParameters->push(yyvsp[0].expression);
		;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2778 "../../../../src/sdrc/sl.y"



#include	"lex.sl.cpp"



int	CScriptContext::compile(FILE *in,char *outName) {
	
	sdr		=	this;

	slin	=	in;

	slparse();

	if (compileError == 0) {
		char		*tmp;

		if (outName == NULL) {
			// If there's no compile error, dump the compiled code
			tmp	=	new char[strlen(sdr->shaderName)+5];

			strcpy(tmp,sdr->shaderName);
			strcat(tmp,".sdr");
		} else {
			tmp	=	outName;
		}

		sdr->generateCode(tmp);

		if (tmp != outName) delete [] tmp;

		return TRUE;
	}
	return FALSE;
}


void	yyerror(char *mes) {
	sdr->error("Parse error\n");
}



